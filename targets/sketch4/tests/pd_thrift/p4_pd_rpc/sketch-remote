#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from p4_pd_rpc import sketch
from p4_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  EntryHandle_t table_temp_table_add_with_temp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val1_table_add_with_min_val1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val2_table_add_with_min_val2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val3_table_add_with_min_val3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val4_table_add_with_min_val4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t same_minimum_count_table_add_with_same_minimum(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t new_table_entry_array_table_add_with_first_time_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t old_table_entry_array_table_add_with_again_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_lpm_table_add_with_set_nhop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_ipv4_lpm_match_spec_t match_spec, sketch_set_nhop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_lpm_table_add_with__drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_ipv4_lpm_match_spec_t match_spec)')
  print('  EntryHandle_t forward_table_add_with_set_dmac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_forward_match_spec_t match_spec, sketch_set_dmac_action_spec_t action_spec)')
  print('  EntryHandle_t forward_table_add_with__drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_forward_match_spec_t match_spec)')
  print('  EntryHandle_t send_frame_table_add_with_rewrite_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_send_frame_match_spec_t match_spec, sketch_rewrite_mac_action_spec_t action_spec)')
  print('  EntryHandle_t send_frame_table_add_with__drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_send_frame_match_spec_t match_spec)')
  print('  EntryHandle_t copy_to_cpu_table_add_with_do_copy_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t redirect_table_add_with_no_op(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_redirect_match_spec_t match_spec)')
  print('  EntryHandle_t redirect_table_add_with_do_cpu_encap(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_redirect_match_spec_t match_spec)')
  print('  EntryHandle_t set_myvalue_table_add_with_no_op(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_set_myvalue_match_spec_t match_spec)')
  print('  EntryHandle_t set_myvalue_table_add_with_do_set_myvalue(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_set_myvalue_match_spec_t match_spec)')
  print('  i32 table_temp_table_modify_with_temp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val1_table_modify_with_min_val1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val2_table_modify_with_min_val2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val3_table_modify_with_min_val3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val4_table_modify_with_min_val4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 same_minimum_count_table_modify_with_same_minimum(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 new_table_entry_array_table_modify_with_first_time_count(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 old_table_entry_array_table_modify_with_again_count(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_lpm_table_modify_with_set_nhop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, sketch_set_nhop_action_spec_t action_spec)')
  print('  i32 ipv4_lpm_table_modify_with__drop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 forward_table_modify_with_set_dmac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, sketch_set_dmac_action_spec_t action_spec)')
  print('  i32 forward_table_modify_with__drop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 send_frame_table_modify_with_rewrite_mac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, sketch_rewrite_mac_action_spec_t action_spec)')
  print('  i32 send_frame_table_modify_with__drop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 copy_to_cpu_table_modify_with_do_copy_to_cpu(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 redirect_table_modify_with_no_op(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 redirect_table_modify_with_do_cpu_encap(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 set_myvalue_table_modify_with_no_op(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 set_myvalue_table_modify_with_do_set_myvalue(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 table_temp_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val1_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val2_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val3_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 minimum_val4_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 same_minimum_count_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 new_table_entry_array_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 old_table_entry_array_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_lpm_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 forward_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 send_frame_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 copy_to_cpu_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 redirect_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 set_myvalue_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 table_temp_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   table_temp_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string table_temp_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 minimum_val1_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   minimum_val1_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string minimum_val1_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 minimum_val2_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   minimum_val2_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string minimum_val2_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 minimum_val3_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   minimum_val3_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string minimum_val3_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 minimum_val4_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   minimum_val4_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string minimum_val4_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 same_minimum_count_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   same_minimum_count_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string same_minimum_count_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 new_table_entry_array_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   new_table_entry_array_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string new_table_entry_array_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 old_table_entry_array_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   old_table_entry_array_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string old_table_entry_array_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 ipv4_lpm_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   ipv4_lpm_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string ipv4_lpm_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 forward_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   forward_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string forward_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 send_frame_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   send_frame_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string send_frame_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 copy_to_cpu_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   copy_to_cpu_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string copy_to_cpu_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 redirect_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   redirect_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string redirect_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  i32 set_myvalue_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('   set_myvalue_get_next_entry_handles(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl, i32 n)')
  print('  string set_myvalue_get_entry(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry_hdl)')
  print('  EntryHandle_t table_temp_set_default_action_temp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val1_set_default_action_min_val1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val2_set_default_action_min_val2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val3_set_default_action_min_val3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t minimum_val4_set_default_action_min_val4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t same_minimum_count_set_default_action_same_minimum(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t new_table_entry_array_set_default_action_first_time_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t old_table_entry_array_set_default_action_again_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_lpm_set_default_action_set_nhop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_set_nhop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_lpm_set_default_action__drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t forward_set_default_action_set_dmac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_set_dmac_action_spec_t action_spec)')
  print('  EntryHandle_t forward_set_default_action__drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t send_frame_set_default_action_rewrite_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, sketch_rewrite_mac_action_spec_t action_spec)')
  print('  EntryHandle_t send_frame_set_default_action__drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t copy_to_cpu_set_default_action_do_copy_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t redirect_set_default_action_no_op(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t redirect_set_default_action_do_cpu_encap(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t set_myvalue_set_default_action_no_op(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t set_myvalue_set_default_action_do_set_myvalue(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 clean_all(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 tables_clean_all(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 table_temp_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 table_temp_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val1_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val1_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val2_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val2_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val3_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val3_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val4_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val4_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 same_minimum_count_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 same_minimum_count_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 new_table_entry_array_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 new_table_entry_array_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 old_table_entry_array_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 old_table_entry_array_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 ipv4_lpm_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 ipv4_lpm_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 forward_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 forward_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 send_frame_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 send_frame_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 copy_to_cpu_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 copy_to_cpu_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 redirect_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 redirect_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 set_myvalue_table_read_bytes_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 set_myvalue_table_read_bytes_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 table_temp_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 table_temp_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val1_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val1_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val2_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val2_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val3_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val3_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val4_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 minimum_val4_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 same_minimum_count_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 same_minimum_count_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 new_table_entry_array_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 new_table_entry_array_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 old_table_entry_array_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 old_table_entry_array_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 ipv4_lpm_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 ipv4_lpm_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 forward_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 forward_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 send_frame_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 send_frame_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 copy_to_cpu_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 copy_to_cpu_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 redirect_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 redirect_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 set_myvalue_table_read_packets_counter_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i64 set_myvalue_table_read_packets_counter_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 mirroring_mapping_add(i32 mirror_id, i32 egress_port)')
  print('  i32 mirroring_mapping_delete(i32 mirror_id)')
  print('  i32 mirroring_mapping_get_egress_port(i32 mirror_id)')
  print('  void set_learning_timeout(SessionHandle_t sess_hdl, byte dev_id, i32 msecs)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = sketch.Client(protocol)
transport.open()

if cmd == 'table_temp_table_add_with_temp':
  if len(args) != 2:
    print('table_temp_table_add_with_temp requires 2 args')
    sys.exit(1)
  pp.pprint(client.table_temp_table_add_with_temp(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val1_table_add_with_min_val1':
  if len(args) != 2:
    print('minimum_val1_table_add_with_min_val1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_table_add_with_min_val1(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val2_table_add_with_min_val2':
  if len(args) != 2:
    print('minimum_val2_table_add_with_min_val2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_table_add_with_min_val2(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val3_table_add_with_min_val3':
  if len(args) != 2:
    print('minimum_val3_table_add_with_min_val3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_table_add_with_min_val3(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val4_table_add_with_min_val4':
  if len(args) != 2:
    print('minimum_val4_table_add_with_min_val4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_table_add_with_min_val4(eval(args[0]),eval(args[1]),))

elif cmd == 'same_minimum_count_table_add_with_same_minimum':
  if len(args) != 2:
    print('same_minimum_count_table_add_with_same_minimum requires 2 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_table_add_with_same_minimum(eval(args[0]),eval(args[1]),))

elif cmd == 'new_table_entry_array_table_add_with_first_time_count':
  if len(args) != 2:
    print('new_table_entry_array_table_add_with_first_time_count requires 2 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_table_add_with_first_time_count(eval(args[0]),eval(args[1]),))

elif cmd == 'old_table_entry_array_table_add_with_again_count':
  if len(args) != 2:
    print('old_table_entry_array_table_add_with_again_count requires 2 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_table_add_with_again_count(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_lpm_table_add_with_set_nhop':
  if len(args) != 4:
    print('ipv4_lpm_table_add_with_set_nhop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_add_with_set_nhop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_lpm_table_add_with__drop':
  if len(args) != 3:
    print('ipv4_lpm_table_add_with__drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_add_with__drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'forward_table_add_with_set_dmac':
  if len(args) != 4:
    print('forward_table_add_with_set_dmac requires 4 args')
    sys.exit(1)
  pp.pprint(client.forward_table_add_with_set_dmac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'forward_table_add_with__drop':
  if len(args) != 3:
    print('forward_table_add_with__drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.forward_table_add_with__drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'send_frame_table_add_with_rewrite_mac':
  if len(args) != 4:
    print('send_frame_table_add_with_rewrite_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_add_with_rewrite_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'send_frame_table_add_with__drop':
  if len(args) != 3:
    print('send_frame_table_add_with__drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_add_with__drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'copy_to_cpu_table_add_with_do_copy_to_cpu':
  if len(args) != 2:
    print('copy_to_cpu_table_add_with_do_copy_to_cpu requires 2 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_table_add_with_do_copy_to_cpu(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_table_add_with_no_op':
  if len(args) != 3:
    print('redirect_table_add_with_no_op requires 3 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_add_with_no_op(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'redirect_table_add_with_do_cpu_encap':
  if len(args) != 3:
    print('redirect_table_add_with_do_cpu_encap requires 3 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_add_with_do_cpu_encap(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'set_myvalue_table_add_with_no_op':
  if len(args) != 3:
    print('set_myvalue_table_add_with_no_op requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_add_with_no_op(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'set_myvalue_table_add_with_do_set_myvalue':
  if len(args) != 3:
    print('set_myvalue_table_add_with_do_set_myvalue requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_add_with_do_set_myvalue(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'table_temp_table_modify_with_temp':
  if len(args) != 3:
    print('table_temp_table_modify_with_temp requires 3 args')
    sys.exit(1)
  pp.pprint(client.table_temp_table_modify_with_temp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val1_table_modify_with_min_val1':
  if len(args) != 3:
    print('minimum_val1_table_modify_with_min_val1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_table_modify_with_min_val1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val2_table_modify_with_min_val2':
  if len(args) != 3:
    print('minimum_val2_table_modify_with_min_val2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_table_modify_with_min_val2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val3_table_modify_with_min_val3':
  if len(args) != 3:
    print('minimum_val3_table_modify_with_min_val3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_table_modify_with_min_val3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val4_table_modify_with_min_val4':
  if len(args) != 3:
    print('minimum_val4_table_modify_with_min_val4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_table_modify_with_min_val4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'same_minimum_count_table_modify_with_same_minimum':
  if len(args) != 3:
    print('same_minimum_count_table_modify_with_same_minimum requires 3 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_table_modify_with_same_minimum(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'new_table_entry_array_table_modify_with_first_time_count':
  if len(args) != 3:
    print('new_table_entry_array_table_modify_with_first_time_count requires 3 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_table_modify_with_first_time_count(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'old_table_entry_array_table_modify_with_again_count':
  if len(args) != 3:
    print('old_table_entry_array_table_modify_with_again_count requires 3 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_table_modify_with_again_count(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_lpm_table_modify_with_set_nhop':
  if len(args) != 4:
    print('ipv4_lpm_table_modify_with_set_nhop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_modify_with_set_nhop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_lpm_table_modify_with__drop':
  if len(args) != 3:
    print('ipv4_lpm_table_modify_with__drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_modify_with__drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'forward_table_modify_with_set_dmac':
  if len(args) != 4:
    print('forward_table_modify_with_set_dmac requires 4 args')
    sys.exit(1)
  pp.pprint(client.forward_table_modify_with_set_dmac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'forward_table_modify_with__drop':
  if len(args) != 3:
    print('forward_table_modify_with__drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.forward_table_modify_with__drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'send_frame_table_modify_with_rewrite_mac':
  if len(args) != 4:
    print('send_frame_table_modify_with_rewrite_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_modify_with_rewrite_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'send_frame_table_modify_with__drop':
  if len(args) != 3:
    print('send_frame_table_modify_with__drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_modify_with__drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'copy_to_cpu_table_modify_with_do_copy_to_cpu':
  if len(args) != 3:
    print('copy_to_cpu_table_modify_with_do_copy_to_cpu requires 3 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_table_modify_with_do_copy_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'redirect_table_modify_with_no_op':
  if len(args) != 3:
    print('redirect_table_modify_with_no_op requires 3 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_modify_with_no_op(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'redirect_table_modify_with_do_cpu_encap':
  if len(args) != 3:
    print('redirect_table_modify_with_do_cpu_encap requires 3 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_modify_with_do_cpu_encap(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'set_myvalue_table_modify_with_no_op':
  if len(args) != 3:
    print('set_myvalue_table_modify_with_no_op requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_modify_with_no_op(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'set_myvalue_table_modify_with_do_set_myvalue':
  if len(args) != 3:
    print('set_myvalue_table_modify_with_do_set_myvalue requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_modify_with_do_set_myvalue(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'table_temp_table_delete':
  if len(args) != 3:
    print('table_temp_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.table_temp_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val1_table_delete':
  if len(args) != 3:
    print('minimum_val1_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val2_table_delete':
  if len(args) != 3:
    print('minimum_val2_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val3_table_delete':
  if len(args) != 3:
    print('minimum_val3_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val4_table_delete':
  if len(args) != 3:
    print('minimum_val4_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'same_minimum_count_table_delete':
  if len(args) != 3:
    print('same_minimum_count_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'new_table_entry_array_table_delete':
  if len(args) != 3:
    print('new_table_entry_array_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'old_table_entry_array_table_delete':
  if len(args) != 3:
    print('old_table_entry_array_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_lpm_table_delete':
  if len(args) != 3:
    print('ipv4_lpm_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'forward_table_delete':
  if len(args) != 3:
    print('forward_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.forward_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'send_frame_table_delete':
  if len(args) != 3:
    print('send_frame_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'copy_to_cpu_table_delete':
  if len(args) != 3:
    print('copy_to_cpu_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'redirect_table_delete':
  if len(args) != 3:
    print('redirect_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'set_myvalue_table_delete':
  if len(args) != 3:
    print('set_myvalue_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'table_temp_get_first_entry_handle':
  if len(args) != 2:
    print('table_temp_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.table_temp_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'table_temp_get_next_entry_handles':
  if len(args) != 4:
    print('table_temp_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.table_temp_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'table_temp_get_entry':
  if len(args) != 3:
    print('table_temp_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.table_temp_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val1_get_first_entry_handle':
  if len(args) != 2:
    print('minimum_val1_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val1_get_next_entry_handles':
  if len(args) != 4:
    print('minimum_val1_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'minimum_val1_get_entry':
  if len(args) != 3:
    print('minimum_val1_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val2_get_first_entry_handle':
  if len(args) != 2:
    print('minimum_val2_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val2_get_next_entry_handles':
  if len(args) != 4:
    print('minimum_val2_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'minimum_val2_get_entry':
  if len(args) != 3:
    print('minimum_val2_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val3_get_first_entry_handle':
  if len(args) != 2:
    print('minimum_val3_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val3_get_next_entry_handles':
  if len(args) != 4:
    print('minimum_val3_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'minimum_val3_get_entry':
  if len(args) != 3:
    print('minimum_val3_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'minimum_val4_get_first_entry_handle':
  if len(args) != 2:
    print('minimum_val4_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val4_get_next_entry_handles':
  if len(args) != 4:
    print('minimum_val4_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'minimum_val4_get_entry':
  if len(args) != 3:
    print('minimum_val4_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'same_minimum_count_get_first_entry_handle':
  if len(args) != 2:
    print('same_minimum_count_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'same_minimum_count_get_next_entry_handles':
  if len(args) != 4:
    print('same_minimum_count_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'same_minimum_count_get_entry':
  if len(args) != 3:
    print('same_minimum_count_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'new_table_entry_array_get_first_entry_handle':
  if len(args) != 2:
    print('new_table_entry_array_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'new_table_entry_array_get_next_entry_handles':
  if len(args) != 4:
    print('new_table_entry_array_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'new_table_entry_array_get_entry':
  if len(args) != 3:
    print('new_table_entry_array_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'old_table_entry_array_get_first_entry_handle':
  if len(args) != 2:
    print('old_table_entry_array_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'old_table_entry_array_get_next_entry_handles':
  if len(args) != 4:
    print('old_table_entry_array_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'old_table_entry_array_get_entry':
  if len(args) != 3:
    print('old_table_entry_array_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_lpm_get_first_entry_handle':
  if len(args) != 2:
    print('ipv4_lpm_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_lpm_get_next_entry_handles':
  if len(args) != 4:
    print('ipv4_lpm_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_lpm_get_entry':
  if len(args) != 3:
    print('ipv4_lpm_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'forward_get_first_entry_handle':
  if len(args) != 2:
    print('forward_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.forward_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'forward_get_next_entry_handles':
  if len(args) != 4:
    print('forward_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.forward_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'forward_get_entry':
  if len(args) != 3:
    print('forward_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.forward_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'send_frame_get_first_entry_handle':
  if len(args) != 2:
    print('send_frame_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.send_frame_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'send_frame_get_next_entry_handles':
  if len(args) != 4:
    print('send_frame_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.send_frame_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'send_frame_get_entry':
  if len(args) != 3:
    print('send_frame_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.send_frame_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'copy_to_cpu_get_first_entry_handle':
  if len(args) != 2:
    print('copy_to_cpu_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'copy_to_cpu_get_next_entry_handles':
  if len(args) != 4:
    print('copy_to_cpu_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'copy_to_cpu_get_entry':
  if len(args) != 3:
    print('copy_to_cpu_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'redirect_get_first_entry_handle':
  if len(args) != 2:
    print('redirect_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.redirect_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_get_next_entry_handles':
  if len(args) != 4:
    print('redirect_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.redirect_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'redirect_get_entry':
  if len(args) != 3:
    print('redirect_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.redirect_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'set_myvalue_get_first_entry_handle':
  if len(args) != 2:
    print('set_myvalue_get_first_entry_handle requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_get_first_entry_handle(eval(args[0]),eval(args[1]),))

elif cmd == 'set_myvalue_get_next_entry_handles':
  if len(args) != 4:
    print('set_myvalue_get_next_entry_handles requires 4 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_get_next_entry_handles(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'set_myvalue_get_entry':
  if len(args) != 3:
    print('set_myvalue_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_get_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'table_temp_set_default_action_temp':
  if len(args) != 2:
    print('table_temp_set_default_action_temp requires 2 args')
    sys.exit(1)
  pp.pprint(client.table_temp_set_default_action_temp(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val1_set_default_action_min_val1':
  if len(args) != 2:
    print('minimum_val1_set_default_action_min_val1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_set_default_action_min_val1(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val2_set_default_action_min_val2':
  if len(args) != 2:
    print('minimum_val2_set_default_action_min_val2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_set_default_action_min_val2(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val3_set_default_action_min_val3':
  if len(args) != 2:
    print('minimum_val3_set_default_action_min_val3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_set_default_action_min_val3(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val4_set_default_action_min_val4':
  if len(args) != 2:
    print('minimum_val4_set_default_action_min_val4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_set_default_action_min_val4(eval(args[0]),eval(args[1]),))

elif cmd == 'same_minimum_count_set_default_action_same_minimum':
  if len(args) != 2:
    print('same_minimum_count_set_default_action_same_minimum requires 2 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_set_default_action_same_minimum(eval(args[0]),eval(args[1]),))

elif cmd == 'new_table_entry_array_set_default_action_first_time_count':
  if len(args) != 2:
    print('new_table_entry_array_set_default_action_first_time_count requires 2 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_set_default_action_first_time_count(eval(args[0]),eval(args[1]),))

elif cmd == 'old_table_entry_array_set_default_action_again_count':
  if len(args) != 2:
    print('old_table_entry_array_set_default_action_again_count requires 2 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_set_default_action_again_count(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_lpm_set_default_action_set_nhop':
  if len(args) != 3:
    print('ipv4_lpm_set_default_action_set_nhop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_set_default_action_set_nhop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_lpm_set_default_action__drop':
  if len(args) != 2:
    print('ipv4_lpm_set_default_action__drop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_set_default_action__drop(eval(args[0]),eval(args[1]),))

elif cmd == 'forward_set_default_action_set_dmac':
  if len(args) != 3:
    print('forward_set_default_action_set_dmac requires 3 args')
    sys.exit(1)
  pp.pprint(client.forward_set_default_action_set_dmac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'forward_set_default_action__drop':
  if len(args) != 2:
    print('forward_set_default_action__drop requires 2 args')
    sys.exit(1)
  pp.pprint(client.forward_set_default_action__drop(eval(args[0]),eval(args[1]),))

elif cmd == 'send_frame_set_default_action_rewrite_mac':
  if len(args) != 3:
    print('send_frame_set_default_action_rewrite_mac requires 3 args')
    sys.exit(1)
  pp.pprint(client.send_frame_set_default_action_rewrite_mac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'send_frame_set_default_action__drop':
  if len(args) != 2:
    print('send_frame_set_default_action__drop requires 2 args')
    sys.exit(1)
  pp.pprint(client.send_frame_set_default_action__drop(eval(args[0]),eval(args[1]),))

elif cmd == 'copy_to_cpu_set_default_action_do_copy_to_cpu':
  if len(args) != 2:
    print('copy_to_cpu_set_default_action_do_copy_to_cpu requires 2 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_set_default_action_do_copy_to_cpu(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_set_default_action_no_op':
  if len(args) != 2:
    print('redirect_set_default_action_no_op requires 2 args')
    sys.exit(1)
  pp.pprint(client.redirect_set_default_action_no_op(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_set_default_action_do_cpu_encap':
  if len(args) != 2:
    print('redirect_set_default_action_do_cpu_encap requires 2 args')
    sys.exit(1)
  pp.pprint(client.redirect_set_default_action_do_cpu_encap(eval(args[0]),eval(args[1]),))

elif cmd == 'set_myvalue_set_default_action_no_op':
  if len(args) != 2:
    print('set_myvalue_set_default_action_no_op requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_set_default_action_no_op(eval(args[0]),eval(args[1]),))

elif cmd == 'set_myvalue_set_default_action_do_set_myvalue':
  if len(args) != 2:
    print('set_myvalue_set_default_action_do_set_myvalue requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_set_default_action_do_set_myvalue(eval(args[0]),eval(args[1]),))

elif cmd == 'clean_all':
  if len(args) != 2:
    print('clean_all requires 2 args')
    sys.exit(1)
  pp.pprint(client.clean_all(eval(args[0]),eval(args[1]),))

elif cmd == 'tables_clean_all':
  if len(args) != 2:
    print('tables_clean_all requires 2 args')
    sys.exit(1)
  pp.pprint(client.tables_clean_all(eval(args[0]),eval(args[1]),))

elif cmd == 'table_temp_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('table_temp_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.table_temp_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'table_temp_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('table_temp_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.table_temp_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val1_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('minimum_val1_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val1_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('minimum_val1_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val2_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('minimum_val2_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val2_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('minimum_val2_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val3_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('minimum_val3_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val3_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('minimum_val3_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val4_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('minimum_val4_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val4_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('minimum_val4_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'same_minimum_count_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('same_minimum_count_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'same_minimum_count_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('same_minimum_count_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'new_table_entry_array_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('new_table_entry_array_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'new_table_entry_array_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('new_table_entry_array_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'old_table_entry_array_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('old_table_entry_array_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'old_table_entry_array_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('old_table_entry_array_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_lpm_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('ipv4_lpm_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_lpm_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('ipv4_lpm_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'forward_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('forward_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.forward_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'forward_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('forward_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.forward_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'send_frame_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('send_frame_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'send_frame_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('send_frame_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'copy_to_cpu_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('copy_to_cpu_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'copy_to_cpu_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('copy_to_cpu_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('redirect_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('redirect_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'set_myvalue_table_read_bytes_counter_hit':
  if len(args) != 2:
    print('set_myvalue_table_read_bytes_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_read_bytes_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'set_myvalue_table_read_bytes_counter_miss':
  if len(args) != 2:
    print('set_myvalue_table_read_bytes_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_read_bytes_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'table_temp_table_read_packets_counter_hit':
  if len(args) != 2:
    print('table_temp_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.table_temp_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'table_temp_table_read_packets_counter_miss':
  if len(args) != 2:
    print('table_temp_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.table_temp_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val1_table_read_packets_counter_hit':
  if len(args) != 2:
    print('minimum_val1_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val1_table_read_packets_counter_miss':
  if len(args) != 2:
    print('minimum_val1_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val1_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val2_table_read_packets_counter_hit':
  if len(args) != 2:
    print('minimum_val2_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val2_table_read_packets_counter_miss':
  if len(args) != 2:
    print('minimum_val2_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val2_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val3_table_read_packets_counter_hit':
  if len(args) != 2:
    print('minimum_val3_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val3_table_read_packets_counter_miss':
  if len(args) != 2:
    print('minimum_val3_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val3_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val4_table_read_packets_counter_hit':
  if len(args) != 2:
    print('minimum_val4_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'minimum_val4_table_read_packets_counter_miss':
  if len(args) != 2:
    print('minimum_val4_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.minimum_val4_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'same_minimum_count_table_read_packets_counter_hit':
  if len(args) != 2:
    print('same_minimum_count_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'same_minimum_count_table_read_packets_counter_miss':
  if len(args) != 2:
    print('same_minimum_count_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.same_minimum_count_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'new_table_entry_array_table_read_packets_counter_hit':
  if len(args) != 2:
    print('new_table_entry_array_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'new_table_entry_array_table_read_packets_counter_miss':
  if len(args) != 2:
    print('new_table_entry_array_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.new_table_entry_array_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'old_table_entry_array_table_read_packets_counter_hit':
  if len(args) != 2:
    print('old_table_entry_array_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'old_table_entry_array_table_read_packets_counter_miss':
  if len(args) != 2:
    print('old_table_entry_array_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.old_table_entry_array_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_lpm_table_read_packets_counter_hit':
  if len(args) != 2:
    print('ipv4_lpm_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_lpm_table_read_packets_counter_miss':
  if len(args) != 2:
    print('ipv4_lpm_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_lpm_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'forward_table_read_packets_counter_hit':
  if len(args) != 2:
    print('forward_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.forward_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'forward_table_read_packets_counter_miss':
  if len(args) != 2:
    print('forward_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.forward_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'send_frame_table_read_packets_counter_hit':
  if len(args) != 2:
    print('send_frame_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'send_frame_table_read_packets_counter_miss':
  if len(args) != 2:
    print('send_frame_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.send_frame_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'copy_to_cpu_table_read_packets_counter_hit':
  if len(args) != 2:
    print('copy_to_cpu_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'copy_to_cpu_table_read_packets_counter_miss':
  if len(args) != 2:
    print('copy_to_cpu_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.copy_to_cpu_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_table_read_packets_counter_hit':
  if len(args) != 2:
    print('redirect_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'redirect_table_read_packets_counter_miss':
  if len(args) != 2:
    print('redirect_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.redirect_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'set_myvalue_table_read_packets_counter_hit':
  if len(args) != 2:
    print('set_myvalue_table_read_packets_counter_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_read_packets_counter_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'set_myvalue_table_read_packets_counter_miss':
  if len(args) != 2:
    print('set_myvalue_table_read_packets_counter_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_myvalue_table_read_packets_counter_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'mirroring_mapping_add':
  if len(args) != 2:
    print('mirroring_mapping_add requires 2 args')
    sys.exit(1)
  pp.pprint(client.mirroring_mapping_add(eval(args[0]),eval(args[1]),))

elif cmd == 'mirroring_mapping_delete':
  if len(args) != 1:
    print('mirroring_mapping_delete requires 1 args')
    sys.exit(1)
  pp.pprint(client.mirroring_mapping_delete(eval(args[0]),))

elif cmd == 'mirroring_mapping_get_egress_port':
  if len(args) != 1:
    print('mirroring_mapping_get_egress_port requires 1 args')
    sys.exit(1)
  pp.pprint(client.mirroring_mapping_get_egress_port(eval(args[0]),))

elif cmd == 'set_learning_timeout':
  if len(args) != 3:
    print('set_learning_timeout requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_learning_timeout(eval(args[0]),eval(args[1]),eval(args[2]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
