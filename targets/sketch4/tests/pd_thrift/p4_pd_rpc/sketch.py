#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def table_temp_table_add_with_temp(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val1_table_add_with_min_val1(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val2_table_add_with_min_val2(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val3_table_add_with_min_val3(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val4_table_add_with_min_val4(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def same_minimum_count_table_add_with_same_minimum(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def new_table_entry_array_table_add_with_first_time_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def old_table_entry_array_table_add_with_again_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def ipv4_lpm_table_add_with_set_nhop(self, sess_hdl, dev_tgt, match_spec, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
     - action_spec
    """
    pass

  def ipv4_lpm_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    pass

  def forward_table_add_with_set_dmac(self, sess_hdl, dev_tgt, match_spec, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
     - action_spec
    """
    pass

  def forward_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    pass

  def send_frame_table_add_with_rewrite_mac(self, sess_hdl, dev_tgt, match_spec, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
     - action_spec
    """
    pass

  def send_frame_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    pass

  def copy_to_cpu_table_add_with_do_copy_to_cpu(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_table_add_with_no_op(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    pass

  def redirect_table_add_with_do_cpu_encap(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    pass

  def set_myvalue_table_add_with_no_op(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    pass

  def set_myvalue_table_add_with_do_set_myvalue(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    pass

  def table_temp_table_modify_with_temp(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val1_table_modify_with_min_val1(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val2_table_modify_with_min_val2(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val3_table_modify_with_min_val3(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val4_table_modify_with_min_val4(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def same_minimum_count_table_modify_with_same_minimum(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def new_table_entry_array_table_modify_with_first_time_count(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def old_table_entry_array_table_modify_with_again_count(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def ipv4_lpm_table_modify_with_set_nhop(self, sess_hdl, dev_id, entry, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
     - action_spec
    """
    pass

  def ipv4_lpm_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def forward_table_modify_with_set_dmac(self, sess_hdl, dev_id, entry, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
     - action_spec
    """
    pass

  def forward_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def send_frame_table_modify_with_rewrite_mac(self, sess_hdl, dev_id, entry, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
     - action_spec
    """
    pass

  def send_frame_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def copy_to_cpu_table_modify_with_do_copy_to_cpu(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def redirect_table_modify_with_no_op(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def redirect_table_modify_with_do_cpu_encap(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def set_myvalue_table_modify_with_no_op(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def set_myvalue_table_modify_with_do_set_myvalue(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def table_temp_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val1_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val2_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val3_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def minimum_val4_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def same_minimum_count_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def new_table_entry_array_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def old_table_entry_array_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def ipv4_lpm_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def forward_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def send_frame_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def copy_to_cpu_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def redirect_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def set_myvalue_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    pass

  def table_temp_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def table_temp_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def table_temp_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def minimum_val1_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val1_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def minimum_val1_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def minimum_val2_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val2_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def minimum_val2_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def minimum_val3_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val3_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def minimum_val3_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def minimum_val4_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val4_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def minimum_val4_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def same_minimum_count_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def same_minimum_count_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def same_minimum_count_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def new_table_entry_array_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def new_table_entry_array_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def new_table_entry_array_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def old_table_entry_array_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def old_table_entry_array_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def old_table_entry_array_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def ipv4_lpm_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def ipv4_lpm_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def ipv4_lpm_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def forward_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def forward_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def forward_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def send_frame_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def send_frame_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def send_frame_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def copy_to_cpu_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def copy_to_cpu_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def copy_to_cpu_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def redirect_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def redirect_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def set_myvalue_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def set_myvalue_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    pass

  def set_myvalue_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    pass

  def table_temp_set_default_action_temp(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val1_set_default_action_min_val1(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val2_set_default_action_min_val2(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val3_set_default_action_min_val3(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val4_set_default_action_min_val4(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def same_minimum_count_set_default_action_same_minimum(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def new_table_entry_array_set_default_action_first_time_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def old_table_entry_array_set_default_action_again_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def ipv4_lpm_set_default_action_set_nhop(self, sess_hdl, dev_tgt, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - action_spec
    """
    pass

  def ipv4_lpm_set_default_action__drop(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def forward_set_default_action_set_dmac(self, sess_hdl, dev_tgt, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - action_spec
    """
    pass

  def forward_set_default_action__drop(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def send_frame_set_default_action_rewrite_mac(self, sess_hdl, dev_tgt, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - action_spec
    """
    pass

  def send_frame_set_default_action__drop(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def copy_to_cpu_set_default_action_do_copy_to_cpu(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_set_default_action_no_op(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_set_default_action_do_cpu_encap(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def set_myvalue_set_default_action_no_op(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def set_myvalue_set_default_action_do_set_myvalue(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def clean_all(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def tables_clean_all(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def table_temp_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def table_temp_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val1_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val1_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val2_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val2_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val3_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val3_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val4_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val4_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def same_minimum_count_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def same_minimum_count_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def new_table_entry_array_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def new_table_entry_array_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def old_table_entry_array_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def old_table_entry_array_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def ipv4_lpm_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def ipv4_lpm_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def forward_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def forward_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def send_frame_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def send_frame_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def copy_to_cpu_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def copy_to_cpu_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def set_myvalue_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def set_myvalue_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def table_temp_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def table_temp_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val1_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val1_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val2_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val2_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val3_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val3_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val4_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def minimum_val4_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def same_minimum_count_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def same_minimum_count_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def new_table_entry_array_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def new_table_entry_array_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def old_table_entry_array_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def old_table_entry_array_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def ipv4_lpm_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def ipv4_lpm_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def forward_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def forward_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def send_frame_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def send_frame_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def copy_to_cpu_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def copy_to_cpu_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def redirect_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def set_myvalue_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def set_myvalue_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    pass

  def mirroring_mapping_add(self, mirror_id, egress_port):
    """
    Parameters:
     - mirror_id
     - egress_port
    """
    pass

  def mirroring_mapping_delete(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    pass

  def mirroring_mapping_get_egress_port(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    pass

  def set_learning_timeout(self, sess_hdl, dev_id, msecs):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - msecs
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def table_temp_table_add_with_temp(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_table_temp_table_add_with_temp(sess_hdl, dev_tgt)
    return self.recv_table_temp_table_add_with_temp()

  def send_table_temp_table_add_with_temp(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('table_temp_table_add_with_temp', TMessageType.CALL, self._seqid)
    args = table_temp_table_add_with_temp_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_table_add_with_temp(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_table_add_with_temp_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_table_add_with_temp failed: unknown result");

  def minimum_val1_table_add_with_min_val1(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val1_table_add_with_min_val1(sess_hdl, dev_tgt)
    return self.recv_minimum_val1_table_add_with_min_val1()

  def send_minimum_val1_table_add_with_min_val1(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val1_table_add_with_min_val1', TMessageType.CALL, self._seqid)
    args = minimum_val1_table_add_with_min_val1_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_table_add_with_min_val1(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_table_add_with_min_val1_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_table_add_with_min_val1 failed: unknown result");

  def minimum_val2_table_add_with_min_val2(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val2_table_add_with_min_val2(sess_hdl, dev_tgt)
    return self.recv_minimum_val2_table_add_with_min_val2()

  def send_minimum_val2_table_add_with_min_val2(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val2_table_add_with_min_val2', TMessageType.CALL, self._seqid)
    args = minimum_val2_table_add_with_min_val2_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_table_add_with_min_val2(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_table_add_with_min_val2_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_table_add_with_min_val2 failed: unknown result");

  def minimum_val3_table_add_with_min_val3(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val3_table_add_with_min_val3(sess_hdl, dev_tgt)
    return self.recv_minimum_val3_table_add_with_min_val3()

  def send_minimum_val3_table_add_with_min_val3(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val3_table_add_with_min_val3', TMessageType.CALL, self._seqid)
    args = minimum_val3_table_add_with_min_val3_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_table_add_with_min_val3(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_table_add_with_min_val3_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_table_add_with_min_val3 failed: unknown result");

  def minimum_val4_table_add_with_min_val4(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val4_table_add_with_min_val4(sess_hdl, dev_tgt)
    return self.recv_minimum_val4_table_add_with_min_val4()

  def send_minimum_val4_table_add_with_min_val4(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val4_table_add_with_min_val4', TMessageType.CALL, self._seqid)
    args = minimum_val4_table_add_with_min_val4_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_table_add_with_min_val4(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_table_add_with_min_val4_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_table_add_with_min_val4 failed: unknown result");

  def same_minimum_count_table_add_with_same_minimum(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_same_minimum_count_table_add_with_same_minimum(sess_hdl, dev_tgt)
    return self.recv_same_minimum_count_table_add_with_same_minimum()

  def send_same_minimum_count_table_add_with_same_minimum(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('same_minimum_count_table_add_with_same_minimum', TMessageType.CALL, self._seqid)
    args = same_minimum_count_table_add_with_same_minimum_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_table_add_with_same_minimum(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_table_add_with_same_minimum_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_table_add_with_same_minimum failed: unknown result");

  def new_table_entry_array_table_add_with_first_time_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_new_table_entry_array_table_add_with_first_time_count(sess_hdl, dev_tgt)
    return self.recv_new_table_entry_array_table_add_with_first_time_count()

  def send_new_table_entry_array_table_add_with_first_time_count(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('new_table_entry_array_table_add_with_first_time_count', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_table_add_with_first_time_count_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_table_add_with_first_time_count(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_table_add_with_first_time_count_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_table_add_with_first_time_count failed: unknown result");

  def old_table_entry_array_table_add_with_again_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_old_table_entry_array_table_add_with_again_count(sess_hdl, dev_tgt)
    return self.recv_old_table_entry_array_table_add_with_again_count()

  def send_old_table_entry_array_table_add_with_again_count(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('old_table_entry_array_table_add_with_again_count', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_table_add_with_again_count_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_table_add_with_again_count(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_table_add_with_again_count_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_table_add_with_again_count failed: unknown result");

  def ipv4_lpm_table_add_with_set_nhop(self, sess_hdl, dev_tgt, match_spec, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
     - action_spec
    """
    self.send_ipv4_lpm_table_add_with_set_nhop(sess_hdl, dev_tgt, match_spec, action_spec)
    return self.recv_ipv4_lpm_table_add_with_set_nhop()

  def send_ipv4_lpm_table_add_with_set_nhop(self, sess_hdl, dev_tgt, match_spec, action_spec):
    self._oprot.writeMessageBegin('ipv4_lpm_table_add_with_set_nhop', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_add_with_set_nhop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_add_with_set_nhop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_add_with_set_nhop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_add_with_set_nhop failed: unknown result");

  def ipv4_lpm_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    self.send_ipv4_lpm_table_add_with__drop(sess_hdl, dev_tgt, match_spec)
    return self.recv_ipv4_lpm_table_add_with__drop()

  def send_ipv4_lpm_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    self._oprot.writeMessageBegin('ipv4_lpm_table_add_with__drop', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_add_with__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_add_with__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_add_with__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_add_with__drop failed: unknown result");

  def forward_table_add_with_set_dmac(self, sess_hdl, dev_tgt, match_spec, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
     - action_spec
    """
    self.send_forward_table_add_with_set_dmac(sess_hdl, dev_tgt, match_spec, action_spec)
    return self.recv_forward_table_add_with_set_dmac()

  def send_forward_table_add_with_set_dmac(self, sess_hdl, dev_tgt, match_spec, action_spec):
    self._oprot.writeMessageBegin('forward_table_add_with_set_dmac', TMessageType.CALL, self._seqid)
    args = forward_table_add_with_set_dmac_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_add_with_set_dmac(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_add_with_set_dmac_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_add_with_set_dmac failed: unknown result");

  def forward_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    self.send_forward_table_add_with__drop(sess_hdl, dev_tgt, match_spec)
    return self.recv_forward_table_add_with__drop()

  def send_forward_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    self._oprot.writeMessageBegin('forward_table_add_with__drop', TMessageType.CALL, self._seqid)
    args = forward_table_add_with__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_add_with__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_add_with__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_add_with__drop failed: unknown result");

  def send_frame_table_add_with_rewrite_mac(self, sess_hdl, dev_tgt, match_spec, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
     - action_spec
    """
    self.send_send_frame_table_add_with_rewrite_mac(sess_hdl, dev_tgt, match_spec, action_spec)
    return self.recv_send_frame_table_add_with_rewrite_mac()

  def send_send_frame_table_add_with_rewrite_mac(self, sess_hdl, dev_tgt, match_spec, action_spec):
    self._oprot.writeMessageBegin('send_frame_table_add_with_rewrite_mac', TMessageType.CALL, self._seqid)
    args = send_frame_table_add_with_rewrite_mac_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_add_with_rewrite_mac(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_add_with_rewrite_mac_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_add_with_rewrite_mac failed: unknown result");

  def send_frame_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    self.send_send_frame_table_add_with__drop(sess_hdl, dev_tgt, match_spec)
    return self.recv_send_frame_table_add_with__drop()

  def send_send_frame_table_add_with__drop(self, sess_hdl, dev_tgt, match_spec):
    self._oprot.writeMessageBegin('send_frame_table_add_with__drop', TMessageType.CALL, self._seqid)
    args = send_frame_table_add_with__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_add_with__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_add_with__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_add_with__drop failed: unknown result");

  def copy_to_cpu_table_add_with_do_copy_to_cpu(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_copy_to_cpu_table_add_with_do_copy_to_cpu(sess_hdl, dev_tgt)
    return self.recv_copy_to_cpu_table_add_with_do_copy_to_cpu()

  def send_copy_to_cpu_table_add_with_do_copy_to_cpu(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('copy_to_cpu_table_add_with_do_copy_to_cpu', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_table_add_with_do_copy_to_cpu_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_table_add_with_do_copy_to_cpu(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_table_add_with_do_copy_to_cpu_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_table_add_with_do_copy_to_cpu failed: unknown result");

  def redirect_table_add_with_no_op(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    self.send_redirect_table_add_with_no_op(sess_hdl, dev_tgt, match_spec)
    return self.recv_redirect_table_add_with_no_op()

  def send_redirect_table_add_with_no_op(self, sess_hdl, dev_tgt, match_spec):
    self._oprot.writeMessageBegin('redirect_table_add_with_no_op', TMessageType.CALL, self._seqid)
    args = redirect_table_add_with_no_op_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_add_with_no_op(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_add_with_no_op_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_add_with_no_op failed: unknown result");

  def redirect_table_add_with_do_cpu_encap(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    self.send_redirect_table_add_with_do_cpu_encap(sess_hdl, dev_tgt, match_spec)
    return self.recv_redirect_table_add_with_do_cpu_encap()

  def send_redirect_table_add_with_do_cpu_encap(self, sess_hdl, dev_tgt, match_spec):
    self._oprot.writeMessageBegin('redirect_table_add_with_do_cpu_encap', TMessageType.CALL, self._seqid)
    args = redirect_table_add_with_do_cpu_encap_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_add_with_do_cpu_encap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_add_with_do_cpu_encap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_add_with_do_cpu_encap failed: unknown result");

  def set_myvalue_table_add_with_no_op(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    self.send_set_myvalue_table_add_with_no_op(sess_hdl, dev_tgt, match_spec)
    return self.recv_set_myvalue_table_add_with_no_op()

  def send_set_myvalue_table_add_with_no_op(self, sess_hdl, dev_tgt, match_spec):
    self._oprot.writeMessageBegin('set_myvalue_table_add_with_no_op', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_add_with_no_op_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_add_with_no_op(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_add_with_no_op_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_add_with_no_op failed: unknown result");

  def set_myvalue_table_add_with_do_set_myvalue(self, sess_hdl, dev_tgt, match_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - match_spec
    """
    self.send_set_myvalue_table_add_with_do_set_myvalue(sess_hdl, dev_tgt, match_spec)
    return self.recv_set_myvalue_table_add_with_do_set_myvalue()

  def send_set_myvalue_table_add_with_do_set_myvalue(self, sess_hdl, dev_tgt, match_spec):
    self._oprot.writeMessageBegin('set_myvalue_table_add_with_do_set_myvalue', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_add_with_do_set_myvalue_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.match_spec = match_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_add_with_do_set_myvalue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_add_with_do_set_myvalue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_add_with_do_set_myvalue failed: unknown result");

  def table_temp_table_modify_with_temp(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_table_temp_table_modify_with_temp(sess_hdl, dev_id, entry)
    return self.recv_table_temp_table_modify_with_temp()

  def send_table_temp_table_modify_with_temp(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('table_temp_table_modify_with_temp', TMessageType.CALL, self._seqid)
    args = table_temp_table_modify_with_temp_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_table_modify_with_temp(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_table_modify_with_temp_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_table_modify_with_temp failed: unknown result");

  def minimum_val1_table_modify_with_min_val1(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val1_table_modify_with_min_val1(sess_hdl, dev_id, entry)
    return self.recv_minimum_val1_table_modify_with_min_val1()

  def send_minimum_val1_table_modify_with_min_val1(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val1_table_modify_with_min_val1', TMessageType.CALL, self._seqid)
    args = minimum_val1_table_modify_with_min_val1_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_table_modify_with_min_val1(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_table_modify_with_min_val1_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_table_modify_with_min_val1 failed: unknown result");

  def minimum_val2_table_modify_with_min_val2(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val2_table_modify_with_min_val2(sess_hdl, dev_id, entry)
    return self.recv_minimum_val2_table_modify_with_min_val2()

  def send_minimum_val2_table_modify_with_min_val2(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val2_table_modify_with_min_val2', TMessageType.CALL, self._seqid)
    args = minimum_val2_table_modify_with_min_val2_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_table_modify_with_min_val2(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_table_modify_with_min_val2_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_table_modify_with_min_val2 failed: unknown result");

  def minimum_val3_table_modify_with_min_val3(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val3_table_modify_with_min_val3(sess_hdl, dev_id, entry)
    return self.recv_minimum_val3_table_modify_with_min_val3()

  def send_minimum_val3_table_modify_with_min_val3(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val3_table_modify_with_min_val3', TMessageType.CALL, self._seqid)
    args = minimum_val3_table_modify_with_min_val3_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_table_modify_with_min_val3(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_table_modify_with_min_val3_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_table_modify_with_min_val3 failed: unknown result");

  def minimum_val4_table_modify_with_min_val4(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val4_table_modify_with_min_val4(sess_hdl, dev_id, entry)
    return self.recv_minimum_val4_table_modify_with_min_val4()

  def send_minimum_val4_table_modify_with_min_val4(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val4_table_modify_with_min_val4', TMessageType.CALL, self._seqid)
    args = minimum_val4_table_modify_with_min_val4_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_table_modify_with_min_val4(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_table_modify_with_min_val4_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_table_modify_with_min_val4 failed: unknown result");

  def same_minimum_count_table_modify_with_same_minimum(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_same_minimum_count_table_modify_with_same_minimum(sess_hdl, dev_id, entry)
    return self.recv_same_minimum_count_table_modify_with_same_minimum()

  def send_same_minimum_count_table_modify_with_same_minimum(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('same_minimum_count_table_modify_with_same_minimum', TMessageType.CALL, self._seqid)
    args = same_minimum_count_table_modify_with_same_minimum_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_table_modify_with_same_minimum(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_table_modify_with_same_minimum_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_table_modify_with_same_minimum failed: unknown result");

  def new_table_entry_array_table_modify_with_first_time_count(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_new_table_entry_array_table_modify_with_first_time_count(sess_hdl, dev_id, entry)
    return self.recv_new_table_entry_array_table_modify_with_first_time_count()

  def send_new_table_entry_array_table_modify_with_first_time_count(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('new_table_entry_array_table_modify_with_first_time_count', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_table_modify_with_first_time_count_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_table_modify_with_first_time_count(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_table_modify_with_first_time_count_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_table_modify_with_first_time_count failed: unknown result");

  def old_table_entry_array_table_modify_with_again_count(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_old_table_entry_array_table_modify_with_again_count(sess_hdl, dev_id, entry)
    return self.recv_old_table_entry_array_table_modify_with_again_count()

  def send_old_table_entry_array_table_modify_with_again_count(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('old_table_entry_array_table_modify_with_again_count', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_table_modify_with_again_count_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_table_modify_with_again_count(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_table_modify_with_again_count_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_table_modify_with_again_count failed: unknown result");

  def ipv4_lpm_table_modify_with_set_nhop(self, sess_hdl, dev_id, entry, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
     - action_spec
    """
    self.send_ipv4_lpm_table_modify_with_set_nhop(sess_hdl, dev_id, entry, action_spec)
    return self.recv_ipv4_lpm_table_modify_with_set_nhop()

  def send_ipv4_lpm_table_modify_with_set_nhop(self, sess_hdl, dev_id, entry, action_spec):
    self._oprot.writeMessageBegin('ipv4_lpm_table_modify_with_set_nhop', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_modify_with_set_nhop_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_modify_with_set_nhop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_modify_with_set_nhop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_modify_with_set_nhop failed: unknown result");

  def ipv4_lpm_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_ipv4_lpm_table_modify_with__drop(sess_hdl, dev_id, entry)
    return self.recv_ipv4_lpm_table_modify_with__drop()

  def send_ipv4_lpm_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('ipv4_lpm_table_modify_with__drop', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_modify_with__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_modify_with__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_modify_with__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_modify_with__drop failed: unknown result");

  def forward_table_modify_with_set_dmac(self, sess_hdl, dev_id, entry, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
     - action_spec
    """
    self.send_forward_table_modify_with_set_dmac(sess_hdl, dev_id, entry, action_spec)
    return self.recv_forward_table_modify_with_set_dmac()

  def send_forward_table_modify_with_set_dmac(self, sess_hdl, dev_id, entry, action_spec):
    self._oprot.writeMessageBegin('forward_table_modify_with_set_dmac', TMessageType.CALL, self._seqid)
    args = forward_table_modify_with_set_dmac_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_modify_with_set_dmac(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_modify_with_set_dmac_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_modify_with_set_dmac failed: unknown result");

  def forward_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_forward_table_modify_with__drop(sess_hdl, dev_id, entry)
    return self.recv_forward_table_modify_with__drop()

  def send_forward_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('forward_table_modify_with__drop', TMessageType.CALL, self._seqid)
    args = forward_table_modify_with__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_modify_with__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_modify_with__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_modify_with__drop failed: unknown result");

  def send_frame_table_modify_with_rewrite_mac(self, sess_hdl, dev_id, entry, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
     - action_spec
    """
    self.send_send_frame_table_modify_with_rewrite_mac(sess_hdl, dev_id, entry, action_spec)
    return self.recv_send_frame_table_modify_with_rewrite_mac()

  def send_send_frame_table_modify_with_rewrite_mac(self, sess_hdl, dev_id, entry, action_spec):
    self._oprot.writeMessageBegin('send_frame_table_modify_with_rewrite_mac', TMessageType.CALL, self._seqid)
    args = send_frame_table_modify_with_rewrite_mac_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_modify_with_rewrite_mac(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_modify_with_rewrite_mac_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_modify_with_rewrite_mac failed: unknown result");

  def send_frame_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_send_frame_table_modify_with__drop(sess_hdl, dev_id, entry)
    return self.recv_send_frame_table_modify_with__drop()

  def send_send_frame_table_modify_with__drop(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('send_frame_table_modify_with__drop', TMessageType.CALL, self._seqid)
    args = send_frame_table_modify_with__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_modify_with__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_modify_with__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_modify_with__drop failed: unknown result");

  def copy_to_cpu_table_modify_with_do_copy_to_cpu(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_copy_to_cpu_table_modify_with_do_copy_to_cpu(sess_hdl, dev_id, entry)
    return self.recv_copy_to_cpu_table_modify_with_do_copy_to_cpu()

  def send_copy_to_cpu_table_modify_with_do_copy_to_cpu(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('copy_to_cpu_table_modify_with_do_copy_to_cpu', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_table_modify_with_do_copy_to_cpu_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_table_modify_with_do_copy_to_cpu(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_table_modify_with_do_copy_to_cpu_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_table_modify_with_do_copy_to_cpu failed: unknown result");

  def redirect_table_modify_with_no_op(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_redirect_table_modify_with_no_op(sess_hdl, dev_id, entry)
    return self.recv_redirect_table_modify_with_no_op()

  def send_redirect_table_modify_with_no_op(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('redirect_table_modify_with_no_op', TMessageType.CALL, self._seqid)
    args = redirect_table_modify_with_no_op_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_modify_with_no_op(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_modify_with_no_op_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_modify_with_no_op failed: unknown result");

  def redirect_table_modify_with_do_cpu_encap(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_redirect_table_modify_with_do_cpu_encap(sess_hdl, dev_id, entry)
    return self.recv_redirect_table_modify_with_do_cpu_encap()

  def send_redirect_table_modify_with_do_cpu_encap(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('redirect_table_modify_with_do_cpu_encap', TMessageType.CALL, self._seqid)
    args = redirect_table_modify_with_do_cpu_encap_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_modify_with_do_cpu_encap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_modify_with_do_cpu_encap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_modify_with_do_cpu_encap failed: unknown result");

  def set_myvalue_table_modify_with_no_op(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_set_myvalue_table_modify_with_no_op(sess_hdl, dev_id, entry)
    return self.recv_set_myvalue_table_modify_with_no_op()

  def send_set_myvalue_table_modify_with_no_op(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('set_myvalue_table_modify_with_no_op', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_modify_with_no_op_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_modify_with_no_op(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_modify_with_no_op_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_modify_with_no_op failed: unknown result");

  def set_myvalue_table_modify_with_do_set_myvalue(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_set_myvalue_table_modify_with_do_set_myvalue(sess_hdl, dev_id, entry)
    return self.recv_set_myvalue_table_modify_with_do_set_myvalue()

  def send_set_myvalue_table_modify_with_do_set_myvalue(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('set_myvalue_table_modify_with_do_set_myvalue', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_modify_with_do_set_myvalue_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_modify_with_do_set_myvalue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_modify_with_do_set_myvalue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_modify_with_do_set_myvalue failed: unknown result");

  def table_temp_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_table_temp_table_delete(sess_hdl, dev_id, entry)
    return self.recv_table_temp_table_delete()

  def send_table_temp_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('table_temp_table_delete', TMessageType.CALL, self._seqid)
    args = table_temp_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_table_delete failed: unknown result");

  def minimum_val1_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val1_table_delete(sess_hdl, dev_id, entry)
    return self.recv_minimum_val1_table_delete()

  def send_minimum_val1_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val1_table_delete', TMessageType.CALL, self._seqid)
    args = minimum_val1_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_table_delete failed: unknown result");

  def minimum_val2_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val2_table_delete(sess_hdl, dev_id, entry)
    return self.recv_minimum_val2_table_delete()

  def send_minimum_val2_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val2_table_delete', TMessageType.CALL, self._seqid)
    args = minimum_val2_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_table_delete failed: unknown result");

  def minimum_val3_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val3_table_delete(sess_hdl, dev_id, entry)
    return self.recv_minimum_val3_table_delete()

  def send_minimum_val3_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val3_table_delete', TMessageType.CALL, self._seqid)
    args = minimum_val3_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_table_delete failed: unknown result");

  def minimum_val4_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_minimum_val4_table_delete(sess_hdl, dev_id, entry)
    return self.recv_minimum_val4_table_delete()

  def send_minimum_val4_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('minimum_val4_table_delete', TMessageType.CALL, self._seqid)
    args = minimum_val4_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_table_delete failed: unknown result");

  def same_minimum_count_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_same_minimum_count_table_delete(sess_hdl, dev_id, entry)
    return self.recv_same_minimum_count_table_delete()

  def send_same_minimum_count_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('same_minimum_count_table_delete', TMessageType.CALL, self._seqid)
    args = same_minimum_count_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_table_delete failed: unknown result");

  def new_table_entry_array_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_new_table_entry_array_table_delete(sess_hdl, dev_id, entry)
    return self.recv_new_table_entry_array_table_delete()

  def send_new_table_entry_array_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('new_table_entry_array_table_delete', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_table_delete failed: unknown result");

  def old_table_entry_array_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_old_table_entry_array_table_delete(sess_hdl, dev_id, entry)
    return self.recv_old_table_entry_array_table_delete()

  def send_old_table_entry_array_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('old_table_entry_array_table_delete', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_table_delete failed: unknown result");

  def ipv4_lpm_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_ipv4_lpm_table_delete(sess_hdl, dev_id, entry)
    return self.recv_ipv4_lpm_table_delete()

  def send_ipv4_lpm_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('ipv4_lpm_table_delete', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_delete failed: unknown result");

  def forward_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_forward_table_delete(sess_hdl, dev_id, entry)
    return self.recv_forward_table_delete()

  def send_forward_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('forward_table_delete', TMessageType.CALL, self._seqid)
    args = forward_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_delete failed: unknown result");

  def send_frame_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_send_frame_table_delete(sess_hdl, dev_id, entry)
    return self.recv_send_frame_table_delete()

  def send_send_frame_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('send_frame_table_delete', TMessageType.CALL, self._seqid)
    args = send_frame_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_delete failed: unknown result");

  def copy_to_cpu_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_copy_to_cpu_table_delete(sess_hdl, dev_id, entry)
    return self.recv_copy_to_cpu_table_delete()

  def send_copy_to_cpu_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('copy_to_cpu_table_delete', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_table_delete failed: unknown result");

  def redirect_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_redirect_table_delete(sess_hdl, dev_id, entry)
    return self.recv_redirect_table_delete()

  def send_redirect_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('redirect_table_delete', TMessageType.CALL, self._seqid)
    args = redirect_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_delete failed: unknown result");

  def set_myvalue_table_delete(self, sess_hdl, dev_id, entry):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry
    """
    self.send_set_myvalue_table_delete(sess_hdl, dev_id, entry)
    return self.recv_set_myvalue_table_delete()

  def send_set_myvalue_table_delete(self, sess_hdl, dev_id, entry):
    self._oprot.writeMessageBegin('set_myvalue_table_delete', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_delete_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry = entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_delete failed: unknown result");

  def table_temp_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_table_temp_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_table_temp_get_first_entry_handle()

  def send_table_temp_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('table_temp_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = table_temp_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_get_first_entry_handle failed: unknown result");

  def table_temp_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_table_temp_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_table_temp_get_next_entry_handles()

  def send_table_temp_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('table_temp_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = table_temp_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_get_next_entry_handles failed: unknown result");

  def table_temp_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_table_temp_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_table_temp_get_entry()

  def send_table_temp_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('table_temp_get_entry', TMessageType.CALL, self._seqid)
    args = table_temp_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_get_entry failed: unknown result");

  def minimum_val1_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val1_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_minimum_val1_get_first_entry_handle()

  def send_minimum_val1_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val1_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = minimum_val1_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_get_first_entry_handle failed: unknown result");

  def minimum_val1_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_minimum_val1_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_minimum_val1_get_next_entry_handles()

  def send_minimum_val1_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('minimum_val1_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = minimum_val1_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_get_next_entry_handles failed: unknown result");

  def minimum_val1_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_minimum_val1_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_minimum_val1_get_entry()

  def send_minimum_val1_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('minimum_val1_get_entry', TMessageType.CALL, self._seqid)
    args = minimum_val1_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_get_entry failed: unknown result");

  def minimum_val2_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val2_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_minimum_val2_get_first_entry_handle()

  def send_minimum_val2_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val2_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = minimum_val2_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_get_first_entry_handle failed: unknown result");

  def minimum_val2_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_minimum_val2_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_minimum_val2_get_next_entry_handles()

  def send_minimum_val2_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('minimum_val2_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = minimum_val2_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_get_next_entry_handles failed: unknown result");

  def minimum_val2_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_minimum_val2_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_minimum_val2_get_entry()

  def send_minimum_val2_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('minimum_val2_get_entry', TMessageType.CALL, self._seqid)
    args = minimum_val2_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_get_entry failed: unknown result");

  def minimum_val3_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val3_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_minimum_val3_get_first_entry_handle()

  def send_minimum_val3_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val3_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = minimum_val3_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_get_first_entry_handle failed: unknown result");

  def minimum_val3_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_minimum_val3_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_minimum_val3_get_next_entry_handles()

  def send_minimum_val3_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('minimum_val3_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = minimum_val3_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_get_next_entry_handles failed: unknown result");

  def minimum_val3_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_minimum_val3_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_minimum_val3_get_entry()

  def send_minimum_val3_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('minimum_val3_get_entry', TMessageType.CALL, self._seqid)
    args = minimum_val3_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_get_entry failed: unknown result");

  def minimum_val4_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val4_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_minimum_val4_get_first_entry_handle()

  def send_minimum_val4_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val4_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = minimum_val4_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_get_first_entry_handle failed: unknown result");

  def minimum_val4_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_minimum_val4_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_minimum_val4_get_next_entry_handles()

  def send_minimum_val4_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('minimum_val4_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = minimum_val4_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_get_next_entry_handles failed: unknown result");

  def minimum_val4_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_minimum_val4_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_minimum_val4_get_entry()

  def send_minimum_val4_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('minimum_val4_get_entry', TMessageType.CALL, self._seqid)
    args = minimum_val4_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_get_entry failed: unknown result");

  def same_minimum_count_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_same_minimum_count_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_same_minimum_count_get_first_entry_handle()

  def send_same_minimum_count_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('same_minimum_count_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = same_minimum_count_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_get_first_entry_handle failed: unknown result");

  def same_minimum_count_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_same_minimum_count_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_same_minimum_count_get_next_entry_handles()

  def send_same_minimum_count_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('same_minimum_count_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = same_minimum_count_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_get_next_entry_handles failed: unknown result");

  def same_minimum_count_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_same_minimum_count_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_same_minimum_count_get_entry()

  def send_same_minimum_count_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('same_minimum_count_get_entry', TMessageType.CALL, self._seqid)
    args = same_minimum_count_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_get_entry failed: unknown result");

  def new_table_entry_array_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_new_table_entry_array_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_new_table_entry_array_get_first_entry_handle()

  def send_new_table_entry_array_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('new_table_entry_array_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_get_first_entry_handle failed: unknown result");

  def new_table_entry_array_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_new_table_entry_array_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_new_table_entry_array_get_next_entry_handles()

  def send_new_table_entry_array_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('new_table_entry_array_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_get_next_entry_handles failed: unknown result");

  def new_table_entry_array_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_new_table_entry_array_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_new_table_entry_array_get_entry()

  def send_new_table_entry_array_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('new_table_entry_array_get_entry', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_get_entry failed: unknown result");

  def old_table_entry_array_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_old_table_entry_array_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_old_table_entry_array_get_first_entry_handle()

  def send_old_table_entry_array_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('old_table_entry_array_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_get_first_entry_handle failed: unknown result");

  def old_table_entry_array_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_old_table_entry_array_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_old_table_entry_array_get_next_entry_handles()

  def send_old_table_entry_array_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('old_table_entry_array_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_get_next_entry_handles failed: unknown result");

  def old_table_entry_array_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_old_table_entry_array_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_old_table_entry_array_get_entry()

  def send_old_table_entry_array_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('old_table_entry_array_get_entry', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_get_entry failed: unknown result");

  def ipv4_lpm_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_ipv4_lpm_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_ipv4_lpm_get_first_entry_handle()

  def send_ipv4_lpm_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('ipv4_lpm_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_get_first_entry_handle failed: unknown result");

  def ipv4_lpm_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_ipv4_lpm_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_ipv4_lpm_get_next_entry_handles()

  def send_ipv4_lpm_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('ipv4_lpm_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_get_next_entry_handles failed: unknown result");

  def ipv4_lpm_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_ipv4_lpm_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_ipv4_lpm_get_entry()

  def send_ipv4_lpm_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('ipv4_lpm_get_entry', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_get_entry failed: unknown result");

  def forward_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_forward_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_forward_get_first_entry_handle()

  def send_forward_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('forward_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = forward_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_get_first_entry_handle failed: unknown result");

  def forward_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_forward_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_forward_get_next_entry_handles()

  def send_forward_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('forward_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = forward_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_get_next_entry_handles failed: unknown result");

  def forward_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_forward_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_forward_get_entry()

  def send_forward_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('forward_get_entry', TMessageType.CALL, self._seqid)
    args = forward_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_get_entry failed: unknown result");

  def send_frame_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_send_frame_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_send_frame_get_first_entry_handle()

  def send_send_frame_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('send_frame_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = send_frame_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_get_first_entry_handle failed: unknown result");

  def send_frame_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_send_frame_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_send_frame_get_next_entry_handles()

  def send_send_frame_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('send_frame_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = send_frame_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_get_next_entry_handles failed: unknown result");

  def send_frame_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_send_frame_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_send_frame_get_entry()

  def send_send_frame_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('send_frame_get_entry', TMessageType.CALL, self._seqid)
    args = send_frame_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_get_entry failed: unknown result");

  def copy_to_cpu_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_copy_to_cpu_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_copy_to_cpu_get_first_entry_handle()

  def send_copy_to_cpu_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('copy_to_cpu_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_get_first_entry_handle failed: unknown result");

  def copy_to_cpu_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_copy_to_cpu_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_copy_to_cpu_get_next_entry_handles()

  def send_copy_to_cpu_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('copy_to_cpu_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_get_next_entry_handles failed: unknown result");

  def copy_to_cpu_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_copy_to_cpu_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_copy_to_cpu_get_entry()

  def send_copy_to_cpu_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('copy_to_cpu_get_entry', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_get_entry failed: unknown result");

  def redirect_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_redirect_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_redirect_get_first_entry_handle()

  def send_redirect_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('redirect_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = redirect_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_get_first_entry_handle failed: unknown result");

  def redirect_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_redirect_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_redirect_get_next_entry_handles()

  def send_redirect_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('redirect_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = redirect_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_get_next_entry_handles failed: unknown result");

  def redirect_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_redirect_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_redirect_get_entry()

  def send_redirect_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('redirect_get_entry', TMessageType.CALL, self._seqid)
    args = redirect_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_get_entry failed: unknown result");

  def set_myvalue_get_first_entry_handle(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_set_myvalue_get_first_entry_handle(sess_hdl, dev_tgt)
    return self.recv_set_myvalue_get_first_entry_handle()

  def send_set_myvalue_get_first_entry_handle(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('set_myvalue_get_first_entry_handle', TMessageType.CALL, self._seqid)
    args = set_myvalue_get_first_entry_handle_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_get_first_entry_handle(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_get_first_entry_handle_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_get_first_entry_handle failed: unknown result");

  def set_myvalue_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
     - n
    """
    self.send_set_myvalue_get_next_entry_handles(sess_hdl, dev_id, entry_hdl, n)
    return self.recv_set_myvalue_get_next_entry_handles()

  def send_set_myvalue_get_next_entry_handles(self, sess_hdl, dev_id, entry_hdl, n):
    self._oprot.writeMessageBegin('set_myvalue_get_next_entry_handles', TMessageType.CALL, self._seqid)
    args = set_myvalue_get_next_entry_handles_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.n = n
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_get_next_entry_handles(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_get_next_entry_handles_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_get_next_entry_handles failed: unknown result");

  def set_myvalue_get_entry(self, sess_hdl, dev_id, entry_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - entry_hdl
    """
    self.send_set_myvalue_get_entry(sess_hdl, dev_id, entry_hdl)
    return self.recv_set_myvalue_get_entry()

  def send_set_myvalue_get_entry(self, sess_hdl, dev_id, entry_hdl):
    self._oprot.writeMessageBegin('set_myvalue_get_entry', TMessageType.CALL, self._seqid)
    args = set_myvalue_get_entry_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.entry_hdl = entry_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_get_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_get_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_get_entry failed: unknown result");

  def table_temp_set_default_action_temp(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_table_temp_set_default_action_temp(sess_hdl, dev_tgt)
    return self.recv_table_temp_set_default_action_temp()

  def send_table_temp_set_default_action_temp(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('table_temp_set_default_action_temp', TMessageType.CALL, self._seqid)
    args = table_temp_set_default_action_temp_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_set_default_action_temp(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_set_default_action_temp_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_set_default_action_temp failed: unknown result");

  def minimum_val1_set_default_action_min_val1(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val1_set_default_action_min_val1(sess_hdl, dev_tgt)
    return self.recv_minimum_val1_set_default_action_min_val1()

  def send_minimum_val1_set_default_action_min_val1(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val1_set_default_action_min_val1', TMessageType.CALL, self._seqid)
    args = minimum_val1_set_default_action_min_val1_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_set_default_action_min_val1(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_set_default_action_min_val1_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_set_default_action_min_val1 failed: unknown result");

  def minimum_val2_set_default_action_min_val2(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val2_set_default_action_min_val2(sess_hdl, dev_tgt)
    return self.recv_minimum_val2_set_default_action_min_val2()

  def send_minimum_val2_set_default_action_min_val2(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val2_set_default_action_min_val2', TMessageType.CALL, self._seqid)
    args = minimum_val2_set_default_action_min_val2_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_set_default_action_min_val2(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_set_default_action_min_val2_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_set_default_action_min_val2 failed: unknown result");

  def minimum_val3_set_default_action_min_val3(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val3_set_default_action_min_val3(sess_hdl, dev_tgt)
    return self.recv_minimum_val3_set_default_action_min_val3()

  def send_minimum_val3_set_default_action_min_val3(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val3_set_default_action_min_val3', TMessageType.CALL, self._seqid)
    args = minimum_val3_set_default_action_min_val3_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_set_default_action_min_val3(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_set_default_action_min_val3_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_set_default_action_min_val3 failed: unknown result");

  def minimum_val4_set_default_action_min_val4(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val4_set_default_action_min_val4(sess_hdl, dev_tgt)
    return self.recv_minimum_val4_set_default_action_min_val4()

  def send_minimum_val4_set_default_action_min_val4(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val4_set_default_action_min_val4', TMessageType.CALL, self._seqid)
    args = minimum_val4_set_default_action_min_val4_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_set_default_action_min_val4(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_set_default_action_min_val4_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_set_default_action_min_val4 failed: unknown result");

  def same_minimum_count_set_default_action_same_minimum(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_same_minimum_count_set_default_action_same_minimum(sess_hdl, dev_tgt)
    return self.recv_same_minimum_count_set_default_action_same_minimum()

  def send_same_minimum_count_set_default_action_same_minimum(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('same_minimum_count_set_default_action_same_minimum', TMessageType.CALL, self._seqid)
    args = same_minimum_count_set_default_action_same_minimum_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_set_default_action_same_minimum(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_set_default_action_same_minimum_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_set_default_action_same_minimum failed: unknown result");

  def new_table_entry_array_set_default_action_first_time_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_new_table_entry_array_set_default_action_first_time_count(sess_hdl, dev_tgt)
    return self.recv_new_table_entry_array_set_default_action_first_time_count()

  def send_new_table_entry_array_set_default_action_first_time_count(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('new_table_entry_array_set_default_action_first_time_count', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_set_default_action_first_time_count_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_set_default_action_first_time_count(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_set_default_action_first_time_count_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_set_default_action_first_time_count failed: unknown result");

  def old_table_entry_array_set_default_action_again_count(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_old_table_entry_array_set_default_action_again_count(sess_hdl, dev_tgt)
    return self.recv_old_table_entry_array_set_default_action_again_count()

  def send_old_table_entry_array_set_default_action_again_count(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('old_table_entry_array_set_default_action_again_count', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_set_default_action_again_count_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_set_default_action_again_count(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_set_default_action_again_count_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_set_default_action_again_count failed: unknown result");

  def ipv4_lpm_set_default_action_set_nhop(self, sess_hdl, dev_tgt, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - action_spec
    """
    self.send_ipv4_lpm_set_default_action_set_nhop(sess_hdl, dev_tgt, action_spec)
    return self.recv_ipv4_lpm_set_default_action_set_nhop()

  def send_ipv4_lpm_set_default_action_set_nhop(self, sess_hdl, dev_tgt, action_spec):
    self._oprot.writeMessageBegin('ipv4_lpm_set_default_action_set_nhop', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_set_default_action_set_nhop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_set_default_action_set_nhop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_set_default_action_set_nhop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_set_default_action_set_nhop failed: unknown result");

  def ipv4_lpm_set_default_action__drop(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_ipv4_lpm_set_default_action__drop(sess_hdl, dev_tgt)
    return self.recv_ipv4_lpm_set_default_action__drop()

  def send_ipv4_lpm_set_default_action__drop(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('ipv4_lpm_set_default_action__drop', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_set_default_action__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_set_default_action__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_set_default_action__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_set_default_action__drop failed: unknown result");

  def forward_set_default_action_set_dmac(self, sess_hdl, dev_tgt, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - action_spec
    """
    self.send_forward_set_default_action_set_dmac(sess_hdl, dev_tgt, action_spec)
    return self.recv_forward_set_default_action_set_dmac()

  def send_forward_set_default_action_set_dmac(self, sess_hdl, dev_tgt, action_spec):
    self._oprot.writeMessageBegin('forward_set_default_action_set_dmac', TMessageType.CALL, self._seqid)
    args = forward_set_default_action_set_dmac_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_set_default_action_set_dmac(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_set_default_action_set_dmac_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_set_default_action_set_dmac failed: unknown result");

  def forward_set_default_action__drop(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_forward_set_default_action__drop(sess_hdl, dev_tgt)
    return self.recv_forward_set_default_action__drop()

  def send_forward_set_default_action__drop(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('forward_set_default_action__drop', TMessageType.CALL, self._seqid)
    args = forward_set_default_action__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_set_default_action__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_set_default_action__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_set_default_action__drop failed: unknown result");

  def send_frame_set_default_action_rewrite_mac(self, sess_hdl, dev_tgt, action_spec):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
     - action_spec
    """
    self.send_send_frame_set_default_action_rewrite_mac(sess_hdl, dev_tgt, action_spec)
    return self.recv_send_frame_set_default_action_rewrite_mac()

  def send_send_frame_set_default_action_rewrite_mac(self, sess_hdl, dev_tgt, action_spec):
    self._oprot.writeMessageBegin('send_frame_set_default_action_rewrite_mac', TMessageType.CALL, self._seqid)
    args = send_frame_set_default_action_rewrite_mac_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.action_spec = action_spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_set_default_action_rewrite_mac(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_set_default_action_rewrite_mac_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_set_default_action_rewrite_mac failed: unknown result");

  def send_frame_set_default_action__drop(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_send_frame_set_default_action__drop(sess_hdl, dev_tgt)
    return self.recv_send_frame_set_default_action__drop()

  def send_send_frame_set_default_action__drop(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('send_frame_set_default_action__drop', TMessageType.CALL, self._seqid)
    args = send_frame_set_default_action__drop_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_set_default_action__drop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_set_default_action__drop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_set_default_action__drop failed: unknown result");

  def copy_to_cpu_set_default_action_do_copy_to_cpu(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_copy_to_cpu_set_default_action_do_copy_to_cpu(sess_hdl, dev_tgt)
    return self.recv_copy_to_cpu_set_default_action_do_copy_to_cpu()

  def send_copy_to_cpu_set_default_action_do_copy_to_cpu(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('copy_to_cpu_set_default_action_do_copy_to_cpu', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_set_default_action_do_copy_to_cpu_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_set_default_action_do_copy_to_cpu(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_set_default_action_do_copy_to_cpu_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_set_default_action_do_copy_to_cpu failed: unknown result");

  def redirect_set_default_action_no_op(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_redirect_set_default_action_no_op(sess_hdl, dev_tgt)
    return self.recv_redirect_set_default_action_no_op()

  def send_redirect_set_default_action_no_op(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('redirect_set_default_action_no_op', TMessageType.CALL, self._seqid)
    args = redirect_set_default_action_no_op_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_set_default_action_no_op(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_set_default_action_no_op_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_set_default_action_no_op failed: unknown result");

  def redirect_set_default_action_do_cpu_encap(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_redirect_set_default_action_do_cpu_encap(sess_hdl, dev_tgt)
    return self.recv_redirect_set_default_action_do_cpu_encap()

  def send_redirect_set_default_action_do_cpu_encap(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('redirect_set_default_action_do_cpu_encap', TMessageType.CALL, self._seqid)
    args = redirect_set_default_action_do_cpu_encap_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_set_default_action_do_cpu_encap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_set_default_action_do_cpu_encap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_set_default_action_do_cpu_encap failed: unknown result");

  def set_myvalue_set_default_action_no_op(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_set_myvalue_set_default_action_no_op(sess_hdl, dev_tgt)
    return self.recv_set_myvalue_set_default_action_no_op()

  def send_set_myvalue_set_default_action_no_op(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('set_myvalue_set_default_action_no_op', TMessageType.CALL, self._seqid)
    args = set_myvalue_set_default_action_no_op_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_set_default_action_no_op(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_set_default_action_no_op_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_set_default_action_no_op failed: unknown result");

  def set_myvalue_set_default_action_do_set_myvalue(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_set_myvalue_set_default_action_do_set_myvalue(sess_hdl, dev_tgt)
    return self.recv_set_myvalue_set_default_action_do_set_myvalue()

  def send_set_myvalue_set_default_action_do_set_myvalue(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('set_myvalue_set_default_action_do_set_myvalue', TMessageType.CALL, self._seqid)
    args = set_myvalue_set_default_action_do_set_myvalue_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_set_default_action_do_set_myvalue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_set_default_action_do_set_myvalue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_set_default_action_do_set_myvalue failed: unknown result");

  def clean_all(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_clean_all(sess_hdl, dev_tgt)
    return self.recv_clean_all()

  def send_clean_all(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('clean_all', TMessageType.CALL, self._seqid)
    args = clean_all_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clean_all(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = clean_all_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "clean_all failed: unknown result");

  def tables_clean_all(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_tables_clean_all(sess_hdl, dev_tgt)
    return self.recv_tables_clean_all()

  def send_tables_clean_all(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('tables_clean_all', TMessageType.CALL, self._seqid)
    args = tables_clean_all_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_tables_clean_all(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = tables_clean_all_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "tables_clean_all failed: unknown result");

  def table_temp_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_table_temp_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_table_temp_table_read_bytes_counter_hit()

  def send_table_temp_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('table_temp_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = table_temp_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_table_read_bytes_counter_hit failed: unknown result");

  def table_temp_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_table_temp_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_table_temp_table_read_bytes_counter_miss()

  def send_table_temp_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('table_temp_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = table_temp_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_table_read_bytes_counter_miss failed: unknown result");

  def minimum_val1_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val1_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val1_table_read_bytes_counter_hit()

  def send_minimum_val1_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val1_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val1_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_table_read_bytes_counter_hit failed: unknown result");

  def minimum_val1_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val1_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val1_table_read_bytes_counter_miss()

  def send_minimum_val1_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val1_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val1_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_table_read_bytes_counter_miss failed: unknown result");

  def minimum_val2_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val2_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val2_table_read_bytes_counter_hit()

  def send_minimum_val2_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val2_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val2_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_table_read_bytes_counter_hit failed: unknown result");

  def minimum_val2_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val2_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val2_table_read_bytes_counter_miss()

  def send_minimum_val2_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val2_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val2_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_table_read_bytes_counter_miss failed: unknown result");

  def minimum_val3_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val3_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val3_table_read_bytes_counter_hit()

  def send_minimum_val3_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val3_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val3_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_table_read_bytes_counter_hit failed: unknown result");

  def minimum_val3_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val3_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val3_table_read_bytes_counter_miss()

  def send_minimum_val3_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val3_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val3_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_table_read_bytes_counter_miss failed: unknown result");

  def minimum_val4_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val4_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val4_table_read_bytes_counter_hit()

  def send_minimum_val4_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val4_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val4_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_table_read_bytes_counter_hit failed: unknown result");

  def minimum_val4_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val4_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val4_table_read_bytes_counter_miss()

  def send_minimum_val4_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val4_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val4_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_table_read_bytes_counter_miss failed: unknown result");

  def same_minimum_count_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_same_minimum_count_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_same_minimum_count_table_read_bytes_counter_hit()

  def send_same_minimum_count_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('same_minimum_count_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = same_minimum_count_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_table_read_bytes_counter_hit failed: unknown result");

  def same_minimum_count_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_same_minimum_count_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_same_minimum_count_table_read_bytes_counter_miss()

  def send_same_minimum_count_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('same_minimum_count_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = same_minimum_count_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_table_read_bytes_counter_miss failed: unknown result");

  def new_table_entry_array_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_new_table_entry_array_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_new_table_entry_array_table_read_bytes_counter_hit()

  def send_new_table_entry_array_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('new_table_entry_array_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_table_read_bytes_counter_hit failed: unknown result");

  def new_table_entry_array_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_new_table_entry_array_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_new_table_entry_array_table_read_bytes_counter_miss()

  def send_new_table_entry_array_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('new_table_entry_array_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_table_read_bytes_counter_miss failed: unknown result");

  def old_table_entry_array_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_old_table_entry_array_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_old_table_entry_array_table_read_bytes_counter_hit()

  def send_old_table_entry_array_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('old_table_entry_array_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_table_read_bytes_counter_hit failed: unknown result");

  def old_table_entry_array_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_old_table_entry_array_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_old_table_entry_array_table_read_bytes_counter_miss()

  def send_old_table_entry_array_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('old_table_entry_array_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_table_read_bytes_counter_miss failed: unknown result");

  def ipv4_lpm_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_ipv4_lpm_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_ipv4_lpm_table_read_bytes_counter_hit()

  def send_ipv4_lpm_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('ipv4_lpm_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_read_bytes_counter_hit failed: unknown result");

  def ipv4_lpm_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_ipv4_lpm_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_ipv4_lpm_table_read_bytes_counter_miss()

  def send_ipv4_lpm_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('ipv4_lpm_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_read_bytes_counter_miss failed: unknown result");

  def forward_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_forward_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_forward_table_read_bytes_counter_hit()

  def send_forward_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('forward_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = forward_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_read_bytes_counter_hit failed: unknown result");

  def forward_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_forward_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_forward_table_read_bytes_counter_miss()

  def send_forward_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('forward_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = forward_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_read_bytes_counter_miss failed: unknown result");

  def send_frame_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_send_frame_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_send_frame_table_read_bytes_counter_hit()

  def send_send_frame_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('send_frame_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = send_frame_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_read_bytes_counter_hit failed: unknown result");

  def send_frame_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_send_frame_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_send_frame_table_read_bytes_counter_miss()

  def send_send_frame_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('send_frame_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = send_frame_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_read_bytes_counter_miss failed: unknown result");

  def copy_to_cpu_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_copy_to_cpu_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_copy_to_cpu_table_read_bytes_counter_hit()

  def send_copy_to_cpu_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('copy_to_cpu_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_table_read_bytes_counter_hit failed: unknown result");

  def copy_to_cpu_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_copy_to_cpu_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_copy_to_cpu_table_read_bytes_counter_miss()

  def send_copy_to_cpu_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('copy_to_cpu_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_table_read_bytes_counter_miss failed: unknown result");

  def redirect_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_redirect_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_redirect_table_read_bytes_counter_hit()

  def send_redirect_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('redirect_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = redirect_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_read_bytes_counter_hit failed: unknown result");

  def redirect_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_redirect_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_redirect_table_read_bytes_counter_miss()

  def send_redirect_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('redirect_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = redirect_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_read_bytes_counter_miss failed: unknown result");

  def set_myvalue_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_set_myvalue_table_read_bytes_counter_hit(sess_hdl, dev_tgt)
    return self.recv_set_myvalue_table_read_bytes_counter_hit()

  def send_set_myvalue_table_read_bytes_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('set_myvalue_table_read_bytes_counter_hit', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_read_bytes_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_read_bytes_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_read_bytes_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_read_bytes_counter_hit failed: unknown result");

  def set_myvalue_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_set_myvalue_table_read_bytes_counter_miss(sess_hdl, dev_tgt)
    return self.recv_set_myvalue_table_read_bytes_counter_miss()

  def send_set_myvalue_table_read_bytes_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('set_myvalue_table_read_bytes_counter_miss', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_read_bytes_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_read_bytes_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_read_bytes_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_read_bytes_counter_miss failed: unknown result");

  def table_temp_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_table_temp_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_table_temp_table_read_packets_counter_hit()

  def send_table_temp_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('table_temp_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = table_temp_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_table_read_packets_counter_hit failed: unknown result");

  def table_temp_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_table_temp_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_table_temp_table_read_packets_counter_miss()

  def send_table_temp_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('table_temp_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = table_temp_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_table_temp_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = table_temp_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "table_temp_table_read_packets_counter_miss failed: unknown result");

  def minimum_val1_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val1_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val1_table_read_packets_counter_hit()

  def send_minimum_val1_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val1_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val1_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_table_read_packets_counter_hit failed: unknown result");

  def minimum_val1_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val1_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val1_table_read_packets_counter_miss()

  def send_minimum_val1_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val1_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val1_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val1_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val1_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val1_table_read_packets_counter_miss failed: unknown result");

  def minimum_val2_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val2_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val2_table_read_packets_counter_hit()

  def send_minimum_val2_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val2_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val2_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_table_read_packets_counter_hit failed: unknown result");

  def minimum_val2_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val2_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val2_table_read_packets_counter_miss()

  def send_minimum_val2_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val2_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val2_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val2_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val2_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val2_table_read_packets_counter_miss failed: unknown result");

  def minimum_val3_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val3_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val3_table_read_packets_counter_hit()

  def send_minimum_val3_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val3_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val3_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_table_read_packets_counter_hit failed: unknown result");

  def minimum_val3_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val3_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val3_table_read_packets_counter_miss()

  def send_minimum_val3_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val3_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val3_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val3_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val3_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val3_table_read_packets_counter_miss failed: unknown result");

  def minimum_val4_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val4_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_minimum_val4_table_read_packets_counter_hit()

  def send_minimum_val4_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val4_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = minimum_val4_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_table_read_packets_counter_hit failed: unknown result");

  def minimum_val4_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_minimum_val4_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_minimum_val4_table_read_packets_counter_miss()

  def send_minimum_val4_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('minimum_val4_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = minimum_val4_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_minimum_val4_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = minimum_val4_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "minimum_val4_table_read_packets_counter_miss failed: unknown result");

  def same_minimum_count_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_same_minimum_count_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_same_minimum_count_table_read_packets_counter_hit()

  def send_same_minimum_count_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('same_minimum_count_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = same_minimum_count_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_table_read_packets_counter_hit failed: unknown result");

  def same_minimum_count_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_same_minimum_count_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_same_minimum_count_table_read_packets_counter_miss()

  def send_same_minimum_count_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('same_minimum_count_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = same_minimum_count_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_same_minimum_count_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = same_minimum_count_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "same_minimum_count_table_read_packets_counter_miss failed: unknown result");

  def new_table_entry_array_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_new_table_entry_array_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_new_table_entry_array_table_read_packets_counter_hit()

  def send_new_table_entry_array_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('new_table_entry_array_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_table_read_packets_counter_hit failed: unknown result");

  def new_table_entry_array_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_new_table_entry_array_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_new_table_entry_array_table_read_packets_counter_miss()

  def send_new_table_entry_array_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('new_table_entry_array_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = new_table_entry_array_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_new_table_entry_array_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = new_table_entry_array_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "new_table_entry_array_table_read_packets_counter_miss failed: unknown result");

  def old_table_entry_array_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_old_table_entry_array_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_old_table_entry_array_table_read_packets_counter_hit()

  def send_old_table_entry_array_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('old_table_entry_array_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_table_read_packets_counter_hit failed: unknown result");

  def old_table_entry_array_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_old_table_entry_array_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_old_table_entry_array_table_read_packets_counter_miss()

  def send_old_table_entry_array_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('old_table_entry_array_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = old_table_entry_array_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_old_table_entry_array_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = old_table_entry_array_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "old_table_entry_array_table_read_packets_counter_miss failed: unknown result");

  def ipv4_lpm_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_ipv4_lpm_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_ipv4_lpm_table_read_packets_counter_hit()

  def send_ipv4_lpm_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('ipv4_lpm_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_read_packets_counter_hit failed: unknown result");

  def ipv4_lpm_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_ipv4_lpm_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_ipv4_lpm_table_read_packets_counter_miss()

  def send_ipv4_lpm_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('ipv4_lpm_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = ipv4_lpm_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ipv4_lpm_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ipv4_lpm_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ipv4_lpm_table_read_packets_counter_miss failed: unknown result");

  def forward_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_forward_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_forward_table_read_packets_counter_hit()

  def send_forward_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('forward_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = forward_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_read_packets_counter_hit failed: unknown result");

  def forward_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_forward_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_forward_table_read_packets_counter_miss()

  def send_forward_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('forward_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = forward_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forward_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forward_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forward_table_read_packets_counter_miss failed: unknown result");

  def send_frame_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_send_frame_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_send_frame_table_read_packets_counter_hit()

  def send_send_frame_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('send_frame_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = send_frame_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_read_packets_counter_hit failed: unknown result");

  def send_frame_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_send_frame_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_send_frame_table_read_packets_counter_miss()

  def send_send_frame_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('send_frame_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = send_frame_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_send_frame_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = send_frame_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "send_frame_table_read_packets_counter_miss failed: unknown result");

  def copy_to_cpu_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_copy_to_cpu_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_copy_to_cpu_table_read_packets_counter_hit()

  def send_copy_to_cpu_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('copy_to_cpu_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_table_read_packets_counter_hit failed: unknown result");

  def copy_to_cpu_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_copy_to_cpu_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_copy_to_cpu_table_read_packets_counter_miss()

  def send_copy_to_cpu_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('copy_to_cpu_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = copy_to_cpu_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copy_to_cpu_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = copy_to_cpu_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "copy_to_cpu_table_read_packets_counter_miss failed: unknown result");

  def redirect_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_redirect_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_redirect_table_read_packets_counter_hit()

  def send_redirect_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('redirect_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = redirect_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_read_packets_counter_hit failed: unknown result");

  def redirect_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_redirect_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_redirect_table_read_packets_counter_miss()

  def send_redirect_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('redirect_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = redirect_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_redirect_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = redirect_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "redirect_table_read_packets_counter_miss failed: unknown result");

  def set_myvalue_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_set_myvalue_table_read_packets_counter_hit(sess_hdl, dev_tgt)
    return self.recv_set_myvalue_table_read_packets_counter_hit()

  def send_set_myvalue_table_read_packets_counter_hit(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('set_myvalue_table_read_packets_counter_hit', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_read_packets_counter_hit_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_read_packets_counter_hit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_read_packets_counter_hit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_read_packets_counter_hit failed: unknown result");

  def set_myvalue_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    """
    Parameters:
     - sess_hdl
     - dev_tgt
    """
    self.send_set_myvalue_table_read_packets_counter_miss(sess_hdl, dev_tgt)
    return self.recv_set_myvalue_table_read_packets_counter_miss()

  def send_set_myvalue_table_read_packets_counter_miss(self, sess_hdl, dev_tgt):
    self._oprot.writeMessageBegin('set_myvalue_table_read_packets_counter_miss', TMessageType.CALL, self._seqid)
    args = set_myvalue_table_read_packets_counter_miss_args()
    args.sess_hdl = sess_hdl
    args.dev_tgt = dev_tgt
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_myvalue_table_read_packets_counter_miss(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_myvalue_table_read_packets_counter_miss_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_myvalue_table_read_packets_counter_miss failed: unknown result");

  def mirroring_mapping_add(self, mirror_id, egress_port):
    """
    Parameters:
     - mirror_id
     - egress_port
    """
    self.send_mirroring_mapping_add(mirror_id, egress_port)
    return self.recv_mirroring_mapping_add()

  def send_mirroring_mapping_add(self, mirror_id, egress_port):
    self._oprot.writeMessageBegin('mirroring_mapping_add', TMessageType.CALL, self._seqid)
    args = mirroring_mapping_add_args()
    args.mirror_id = mirror_id
    args.egress_port = egress_port
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mirroring_mapping_add(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mirroring_mapping_add_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mirroring_mapping_add failed: unknown result");

  def mirroring_mapping_delete(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    self.send_mirroring_mapping_delete(mirror_id)
    return self.recv_mirroring_mapping_delete()

  def send_mirroring_mapping_delete(self, mirror_id):
    self._oprot.writeMessageBegin('mirroring_mapping_delete', TMessageType.CALL, self._seqid)
    args = mirroring_mapping_delete_args()
    args.mirror_id = mirror_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mirroring_mapping_delete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mirroring_mapping_delete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mirroring_mapping_delete failed: unknown result");

  def mirroring_mapping_get_egress_port(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    self.send_mirroring_mapping_get_egress_port(mirror_id)
    return self.recv_mirroring_mapping_get_egress_port()

  def send_mirroring_mapping_get_egress_port(self, mirror_id):
    self._oprot.writeMessageBegin('mirroring_mapping_get_egress_port', TMessageType.CALL, self._seqid)
    args = mirroring_mapping_get_egress_port_args()
    args.mirror_id = mirror_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mirroring_mapping_get_egress_port(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mirroring_mapping_get_egress_port_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mirroring_mapping_get_egress_port failed: unknown result");

  def set_learning_timeout(self, sess_hdl, dev_id, msecs):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - msecs
    """
    self.send_set_learning_timeout(sess_hdl, dev_id, msecs)
    self.recv_set_learning_timeout()

  def send_set_learning_timeout(self, sess_hdl, dev_id, msecs):
    self._oprot.writeMessageBegin('set_learning_timeout', TMessageType.CALL, self._seqid)
    args = set_learning_timeout_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.msecs = msecs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_learning_timeout(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = set_learning_timeout_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["table_temp_table_add_with_temp"] = Processor.process_table_temp_table_add_with_temp
    self._processMap["minimum_val1_table_add_with_min_val1"] = Processor.process_minimum_val1_table_add_with_min_val1
    self._processMap["minimum_val2_table_add_with_min_val2"] = Processor.process_minimum_val2_table_add_with_min_val2
    self._processMap["minimum_val3_table_add_with_min_val3"] = Processor.process_minimum_val3_table_add_with_min_val3
    self._processMap["minimum_val4_table_add_with_min_val4"] = Processor.process_minimum_val4_table_add_with_min_val4
    self._processMap["same_minimum_count_table_add_with_same_minimum"] = Processor.process_same_minimum_count_table_add_with_same_minimum
    self._processMap["new_table_entry_array_table_add_with_first_time_count"] = Processor.process_new_table_entry_array_table_add_with_first_time_count
    self._processMap["old_table_entry_array_table_add_with_again_count"] = Processor.process_old_table_entry_array_table_add_with_again_count
    self._processMap["ipv4_lpm_table_add_with_set_nhop"] = Processor.process_ipv4_lpm_table_add_with_set_nhop
    self._processMap["ipv4_lpm_table_add_with__drop"] = Processor.process_ipv4_lpm_table_add_with__drop
    self._processMap["forward_table_add_with_set_dmac"] = Processor.process_forward_table_add_with_set_dmac
    self._processMap["forward_table_add_with__drop"] = Processor.process_forward_table_add_with__drop
    self._processMap["send_frame_table_add_with_rewrite_mac"] = Processor.process_send_frame_table_add_with_rewrite_mac
    self._processMap["send_frame_table_add_with__drop"] = Processor.process_send_frame_table_add_with__drop
    self._processMap["copy_to_cpu_table_add_with_do_copy_to_cpu"] = Processor.process_copy_to_cpu_table_add_with_do_copy_to_cpu
    self._processMap["redirect_table_add_with_no_op"] = Processor.process_redirect_table_add_with_no_op
    self._processMap["redirect_table_add_with_do_cpu_encap"] = Processor.process_redirect_table_add_with_do_cpu_encap
    self._processMap["set_myvalue_table_add_with_no_op"] = Processor.process_set_myvalue_table_add_with_no_op
    self._processMap["set_myvalue_table_add_with_do_set_myvalue"] = Processor.process_set_myvalue_table_add_with_do_set_myvalue
    self._processMap["table_temp_table_modify_with_temp"] = Processor.process_table_temp_table_modify_with_temp
    self._processMap["minimum_val1_table_modify_with_min_val1"] = Processor.process_minimum_val1_table_modify_with_min_val1
    self._processMap["minimum_val2_table_modify_with_min_val2"] = Processor.process_minimum_val2_table_modify_with_min_val2
    self._processMap["minimum_val3_table_modify_with_min_val3"] = Processor.process_minimum_val3_table_modify_with_min_val3
    self._processMap["minimum_val4_table_modify_with_min_val4"] = Processor.process_minimum_val4_table_modify_with_min_val4
    self._processMap["same_minimum_count_table_modify_with_same_minimum"] = Processor.process_same_minimum_count_table_modify_with_same_minimum
    self._processMap["new_table_entry_array_table_modify_with_first_time_count"] = Processor.process_new_table_entry_array_table_modify_with_first_time_count
    self._processMap["old_table_entry_array_table_modify_with_again_count"] = Processor.process_old_table_entry_array_table_modify_with_again_count
    self._processMap["ipv4_lpm_table_modify_with_set_nhop"] = Processor.process_ipv4_lpm_table_modify_with_set_nhop
    self._processMap["ipv4_lpm_table_modify_with__drop"] = Processor.process_ipv4_lpm_table_modify_with__drop
    self._processMap["forward_table_modify_with_set_dmac"] = Processor.process_forward_table_modify_with_set_dmac
    self._processMap["forward_table_modify_with__drop"] = Processor.process_forward_table_modify_with__drop
    self._processMap["send_frame_table_modify_with_rewrite_mac"] = Processor.process_send_frame_table_modify_with_rewrite_mac
    self._processMap["send_frame_table_modify_with__drop"] = Processor.process_send_frame_table_modify_with__drop
    self._processMap["copy_to_cpu_table_modify_with_do_copy_to_cpu"] = Processor.process_copy_to_cpu_table_modify_with_do_copy_to_cpu
    self._processMap["redirect_table_modify_with_no_op"] = Processor.process_redirect_table_modify_with_no_op
    self._processMap["redirect_table_modify_with_do_cpu_encap"] = Processor.process_redirect_table_modify_with_do_cpu_encap
    self._processMap["set_myvalue_table_modify_with_no_op"] = Processor.process_set_myvalue_table_modify_with_no_op
    self._processMap["set_myvalue_table_modify_with_do_set_myvalue"] = Processor.process_set_myvalue_table_modify_with_do_set_myvalue
    self._processMap["table_temp_table_delete"] = Processor.process_table_temp_table_delete
    self._processMap["minimum_val1_table_delete"] = Processor.process_minimum_val1_table_delete
    self._processMap["minimum_val2_table_delete"] = Processor.process_minimum_val2_table_delete
    self._processMap["minimum_val3_table_delete"] = Processor.process_minimum_val3_table_delete
    self._processMap["minimum_val4_table_delete"] = Processor.process_minimum_val4_table_delete
    self._processMap["same_minimum_count_table_delete"] = Processor.process_same_minimum_count_table_delete
    self._processMap["new_table_entry_array_table_delete"] = Processor.process_new_table_entry_array_table_delete
    self._processMap["old_table_entry_array_table_delete"] = Processor.process_old_table_entry_array_table_delete
    self._processMap["ipv4_lpm_table_delete"] = Processor.process_ipv4_lpm_table_delete
    self._processMap["forward_table_delete"] = Processor.process_forward_table_delete
    self._processMap["send_frame_table_delete"] = Processor.process_send_frame_table_delete
    self._processMap["copy_to_cpu_table_delete"] = Processor.process_copy_to_cpu_table_delete
    self._processMap["redirect_table_delete"] = Processor.process_redirect_table_delete
    self._processMap["set_myvalue_table_delete"] = Processor.process_set_myvalue_table_delete
    self._processMap["table_temp_get_first_entry_handle"] = Processor.process_table_temp_get_first_entry_handle
    self._processMap["table_temp_get_next_entry_handles"] = Processor.process_table_temp_get_next_entry_handles
    self._processMap["table_temp_get_entry"] = Processor.process_table_temp_get_entry
    self._processMap["minimum_val1_get_first_entry_handle"] = Processor.process_minimum_val1_get_first_entry_handle
    self._processMap["minimum_val1_get_next_entry_handles"] = Processor.process_minimum_val1_get_next_entry_handles
    self._processMap["minimum_val1_get_entry"] = Processor.process_minimum_val1_get_entry
    self._processMap["minimum_val2_get_first_entry_handle"] = Processor.process_minimum_val2_get_first_entry_handle
    self._processMap["minimum_val2_get_next_entry_handles"] = Processor.process_minimum_val2_get_next_entry_handles
    self._processMap["minimum_val2_get_entry"] = Processor.process_minimum_val2_get_entry
    self._processMap["minimum_val3_get_first_entry_handle"] = Processor.process_minimum_val3_get_first_entry_handle
    self._processMap["minimum_val3_get_next_entry_handles"] = Processor.process_minimum_val3_get_next_entry_handles
    self._processMap["minimum_val3_get_entry"] = Processor.process_minimum_val3_get_entry
    self._processMap["minimum_val4_get_first_entry_handle"] = Processor.process_minimum_val4_get_first_entry_handle
    self._processMap["minimum_val4_get_next_entry_handles"] = Processor.process_minimum_val4_get_next_entry_handles
    self._processMap["minimum_val4_get_entry"] = Processor.process_minimum_val4_get_entry
    self._processMap["same_minimum_count_get_first_entry_handle"] = Processor.process_same_minimum_count_get_first_entry_handle
    self._processMap["same_minimum_count_get_next_entry_handles"] = Processor.process_same_minimum_count_get_next_entry_handles
    self._processMap["same_minimum_count_get_entry"] = Processor.process_same_minimum_count_get_entry
    self._processMap["new_table_entry_array_get_first_entry_handle"] = Processor.process_new_table_entry_array_get_first_entry_handle
    self._processMap["new_table_entry_array_get_next_entry_handles"] = Processor.process_new_table_entry_array_get_next_entry_handles
    self._processMap["new_table_entry_array_get_entry"] = Processor.process_new_table_entry_array_get_entry
    self._processMap["old_table_entry_array_get_first_entry_handle"] = Processor.process_old_table_entry_array_get_first_entry_handle
    self._processMap["old_table_entry_array_get_next_entry_handles"] = Processor.process_old_table_entry_array_get_next_entry_handles
    self._processMap["old_table_entry_array_get_entry"] = Processor.process_old_table_entry_array_get_entry
    self._processMap["ipv4_lpm_get_first_entry_handle"] = Processor.process_ipv4_lpm_get_first_entry_handle
    self._processMap["ipv4_lpm_get_next_entry_handles"] = Processor.process_ipv4_lpm_get_next_entry_handles
    self._processMap["ipv4_lpm_get_entry"] = Processor.process_ipv4_lpm_get_entry
    self._processMap["forward_get_first_entry_handle"] = Processor.process_forward_get_first_entry_handle
    self._processMap["forward_get_next_entry_handles"] = Processor.process_forward_get_next_entry_handles
    self._processMap["forward_get_entry"] = Processor.process_forward_get_entry
    self._processMap["send_frame_get_first_entry_handle"] = Processor.process_send_frame_get_first_entry_handle
    self._processMap["send_frame_get_next_entry_handles"] = Processor.process_send_frame_get_next_entry_handles
    self._processMap["send_frame_get_entry"] = Processor.process_send_frame_get_entry
    self._processMap["copy_to_cpu_get_first_entry_handle"] = Processor.process_copy_to_cpu_get_first_entry_handle
    self._processMap["copy_to_cpu_get_next_entry_handles"] = Processor.process_copy_to_cpu_get_next_entry_handles
    self._processMap["copy_to_cpu_get_entry"] = Processor.process_copy_to_cpu_get_entry
    self._processMap["redirect_get_first_entry_handle"] = Processor.process_redirect_get_first_entry_handle
    self._processMap["redirect_get_next_entry_handles"] = Processor.process_redirect_get_next_entry_handles
    self._processMap["redirect_get_entry"] = Processor.process_redirect_get_entry
    self._processMap["set_myvalue_get_first_entry_handle"] = Processor.process_set_myvalue_get_first_entry_handle
    self._processMap["set_myvalue_get_next_entry_handles"] = Processor.process_set_myvalue_get_next_entry_handles
    self._processMap["set_myvalue_get_entry"] = Processor.process_set_myvalue_get_entry
    self._processMap["table_temp_set_default_action_temp"] = Processor.process_table_temp_set_default_action_temp
    self._processMap["minimum_val1_set_default_action_min_val1"] = Processor.process_minimum_val1_set_default_action_min_val1
    self._processMap["minimum_val2_set_default_action_min_val2"] = Processor.process_minimum_val2_set_default_action_min_val2
    self._processMap["minimum_val3_set_default_action_min_val3"] = Processor.process_minimum_val3_set_default_action_min_val3
    self._processMap["minimum_val4_set_default_action_min_val4"] = Processor.process_minimum_val4_set_default_action_min_val4
    self._processMap["same_minimum_count_set_default_action_same_minimum"] = Processor.process_same_minimum_count_set_default_action_same_minimum
    self._processMap["new_table_entry_array_set_default_action_first_time_count"] = Processor.process_new_table_entry_array_set_default_action_first_time_count
    self._processMap["old_table_entry_array_set_default_action_again_count"] = Processor.process_old_table_entry_array_set_default_action_again_count
    self._processMap["ipv4_lpm_set_default_action_set_nhop"] = Processor.process_ipv4_lpm_set_default_action_set_nhop
    self._processMap["ipv4_lpm_set_default_action__drop"] = Processor.process_ipv4_lpm_set_default_action__drop
    self._processMap["forward_set_default_action_set_dmac"] = Processor.process_forward_set_default_action_set_dmac
    self._processMap["forward_set_default_action__drop"] = Processor.process_forward_set_default_action__drop
    self._processMap["send_frame_set_default_action_rewrite_mac"] = Processor.process_send_frame_set_default_action_rewrite_mac
    self._processMap["send_frame_set_default_action__drop"] = Processor.process_send_frame_set_default_action__drop
    self._processMap["copy_to_cpu_set_default_action_do_copy_to_cpu"] = Processor.process_copy_to_cpu_set_default_action_do_copy_to_cpu
    self._processMap["redirect_set_default_action_no_op"] = Processor.process_redirect_set_default_action_no_op
    self._processMap["redirect_set_default_action_do_cpu_encap"] = Processor.process_redirect_set_default_action_do_cpu_encap
    self._processMap["set_myvalue_set_default_action_no_op"] = Processor.process_set_myvalue_set_default_action_no_op
    self._processMap["set_myvalue_set_default_action_do_set_myvalue"] = Processor.process_set_myvalue_set_default_action_do_set_myvalue
    self._processMap["clean_all"] = Processor.process_clean_all
    self._processMap["tables_clean_all"] = Processor.process_tables_clean_all
    self._processMap["table_temp_table_read_bytes_counter_hit"] = Processor.process_table_temp_table_read_bytes_counter_hit
    self._processMap["table_temp_table_read_bytes_counter_miss"] = Processor.process_table_temp_table_read_bytes_counter_miss
    self._processMap["minimum_val1_table_read_bytes_counter_hit"] = Processor.process_minimum_val1_table_read_bytes_counter_hit
    self._processMap["minimum_val1_table_read_bytes_counter_miss"] = Processor.process_minimum_val1_table_read_bytes_counter_miss
    self._processMap["minimum_val2_table_read_bytes_counter_hit"] = Processor.process_minimum_val2_table_read_bytes_counter_hit
    self._processMap["minimum_val2_table_read_bytes_counter_miss"] = Processor.process_minimum_val2_table_read_bytes_counter_miss
    self._processMap["minimum_val3_table_read_bytes_counter_hit"] = Processor.process_minimum_val3_table_read_bytes_counter_hit
    self._processMap["minimum_val3_table_read_bytes_counter_miss"] = Processor.process_minimum_val3_table_read_bytes_counter_miss
    self._processMap["minimum_val4_table_read_bytes_counter_hit"] = Processor.process_minimum_val4_table_read_bytes_counter_hit
    self._processMap["minimum_val4_table_read_bytes_counter_miss"] = Processor.process_minimum_val4_table_read_bytes_counter_miss
    self._processMap["same_minimum_count_table_read_bytes_counter_hit"] = Processor.process_same_minimum_count_table_read_bytes_counter_hit
    self._processMap["same_minimum_count_table_read_bytes_counter_miss"] = Processor.process_same_minimum_count_table_read_bytes_counter_miss
    self._processMap["new_table_entry_array_table_read_bytes_counter_hit"] = Processor.process_new_table_entry_array_table_read_bytes_counter_hit
    self._processMap["new_table_entry_array_table_read_bytes_counter_miss"] = Processor.process_new_table_entry_array_table_read_bytes_counter_miss
    self._processMap["old_table_entry_array_table_read_bytes_counter_hit"] = Processor.process_old_table_entry_array_table_read_bytes_counter_hit
    self._processMap["old_table_entry_array_table_read_bytes_counter_miss"] = Processor.process_old_table_entry_array_table_read_bytes_counter_miss
    self._processMap["ipv4_lpm_table_read_bytes_counter_hit"] = Processor.process_ipv4_lpm_table_read_bytes_counter_hit
    self._processMap["ipv4_lpm_table_read_bytes_counter_miss"] = Processor.process_ipv4_lpm_table_read_bytes_counter_miss
    self._processMap["forward_table_read_bytes_counter_hit"] = Processor.process_forward_table_read_bytes_counter_hit
    self._processMap["forward_table_read_bytes_counter_miss"] = Processor.process_forward_table_read_bytes_counter_miss
    self._processMap["send_frame_table_read_bytes_counter_hit"] = Processor.process_send_frame_table_read_bytes_counter_hit
    self._processMap["send_frame_table_read_bytes_counter_miss"] = Processor.process_send_frame_table_read_bytes_counter_miss
    self._processMap["copy_to_cpu_table_read_bytes_counter_hit"] = Processor.process_copy_to_cpu_table_read_bytes_counter_hit
    self._processMap["copy_to_cpu_table_read_bytes_counter_miss"] = Processor.process_copy_to_cpu_table_read_bytes_counter_miss
    self._processMap["redirect_table_read_bytes_counter_hit"] = Processor.process_redirect_table_read_bytes_counter_hit
    self._processMap["redirect_table_read_bytes_counter_miss"] = Processor.process_redirect_table_read_bytes_counter_miss
    self._processMap["set_myvalue_table_read_bytes_counter_hit"] = Processor.process_set_myvalue_table_read_bytes_counter_hit
    self._processMap["set_myvalue_table_read_bytes_counter_miss"] = Processor.process_set_myvalue_table_read_bytes_counter_miss
    self._processMap["table_temp_table_read_packets_counter_hit"] = Processor.process_table_temp_table_read_packets_counter_hit
    self._processMap["table_temp_table_read_packets_counter_miss"] = Processor.process_table_temp_table_read_packets_counter_miss
    self._processMap["minimum_val1_table_read_packets_counter_hit"] = Processor.process_minimum_val1_table_read_packets_counter_hit
    self._processMap["minimum_val1_table_read_packets_counter_miss"] = Processor.process_minimum_val1_table_read_packets_counter_miss
    self._processMap["minimum_val2_table_read_packets_counter_hit"] = Processor.process_minimum_val2_table_read_packets_counter_hit
    self._processMap["minimum_val2_table_read_packets_counter_miss"] = Processor.process_minimum_val2_table_read_packets_counter_miss
    self._processMap["minimum_val3_table_read_packets_counter_hit"] = Processor.process_minimum_val3_table_read_packets_counter_hit
    self._processMap["minimum_val3_table_read_packets_counter_miss"] = Processor.process_minimum_val3_table_read_packets_counter_miss
    self._processMap["minimum_val4_table_read_packets_counter_hit"] = Processor.process_minimum_val4_table_read_packets_counter_hit
    self._processMap["minimum_val4_table_read_packets_counter_miss"] = Processor.process_minimum_val4_table_read_packets_counter_miss
    self._processMap["same_minimum_count_table_read_packets_counter_hit"] = Processor.process_same_minimum_count_table_read_packets_counter_hit
    self._processMap["same_minimum_count_table_read_packets_counter_miss"] = Processor.process_same_minimum_count_table_read_packets_counter_miss
    self._processMap["new_table_entry_array_table_read_packets_counter_hit"] = Processor.process_new_table_entry_array_table_read_packets_counter_hit
    self._processMap["new_table_entry_array_table_read_packets_counter_miss"] = Processor.process_new_table_entry_array_table_read_packets_counter_miss
    self._processMap["old_table_entry_array_table_read_packets_counter_hit"] = Processor.process_old_table_entry_array_table_read_packets_counter_hit
    self._processMap["old_table_entry_array_table_read_packets_counter_miss"] = Processor.process_old_table_entry_array_table_read_packets_counter_miss
    self._processMap["ipv4_lpm_table_read_packets_counter_hit"] = Processor.process_ipv4_lpm_table_read_packets_counter_hit
    self._processMap["ipv4_lpm_table_read_packets_counter_miss"] = Processor.process_ipv4_lpm_table_read_packets_counter_miss
    self._processMap["forward_table_read_packets_counter_hit"] = Processor.process_forward_table_read_packets_counter_hit
    self._processMap["forward_table_read_packets_counter_miss"] = Processor.process_forward_table_read_packets_counter_miss
    self._processMap["send_frame_table_read_packets_counter_hit"] = Processor.process_send_frame_table_read_packets_counter_hit
    self._processMap["send_frame_table_read_packets_counter_miss"] = Processor.process_send_frame_table_read_packets_counter_miss
    self._processMap["copy_to_cpu_table_read_packets_counter_hit"] = Processor.process_copy_to_cpu_table_read_packets_counter_hit
    self._processMap["copy_to_cpu_table_read_packets_counter_miss"] = Processor.process_copy_to_cpu_table_read_packets_counter_miss
    self._processMap["redirect_table_read_packets_counter_hit"] = Processor.process_redirect_table_read_packets_counter_hit
    self._processMap["redirect_table_read_packets_counter_miss"] = Processor.process_redirect_table_read_packets_counter_miss
    self._processMap["set_myvalue_table_read_packets_counter_hit"] = Processor.process_set_myvalue_table_read_packets_counter_hit
    self._processMap["set_myvalue_table_read_packets_counter_miss"] = Processor.process_set_myvalue_table_read_packets_counter_miss
    self._processMap["mirroring_mapping_add"] = Processor.process_mirroring_mapping_add
    self._processMap["mirroring_mapping_delete"] = Processor.process_mirroring_mapping_delete
    self._processMap["mirroring_mapping_get_egress_port"] = Processor.process_mirroring_mapping_get_egress_port
    self._processMap["set_learning_timeout"] = Processor.process_set_learning_timeout

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_table_temp_table_add_with_temp(self, seqid, iprot, oprot):
    args = table_temp_table_add_with_temp_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_table_add_with_temp_result()
    result.success = self._handler.table_temp_table_add_with_temp(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("table_temp_table_add_with_temp", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_table_add_with_min_val1(self, seqid, iprot, oprot):
    args = minimum_val1_table_add_with_min_val1_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_table_add_with_min_val1_result()
    result.success = self._handler.minimum_val1_table_add_with_min_val1(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val1_table_add_with_min_val1", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_table_add_with_min_val2(self, seqid, iprot, oprot):
    args = minimum_val2_table_add_with_min_val2_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_table_add_with_min_val2_result()
    result.success = self._handler.minimum_val2_table_add_with_min_val2(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val2_table_add_with_min_val2", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_table_add_with_min_val3(self, seqid, iprot, oprot):
    args = minimum_val3_table_add_with_min_val3_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_table_add_with_min_val3_result()
    result.success = self._handler.minimum_val3_table_add_with_min_val3(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val3_table_add_with_min_val3", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_table_add_with_min_val4(self, seqid, iprot, oprot):
    args = minimum_val4_table_add_with_min_val4_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_table_add_with_min_val4_result()
    result.success = self._handler.minimum_val4_table_add_with_min_val4(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val4_table_add_with_min_val4", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_table_add_with_same_minimum(self, seqid, iprot, oprot):
    args = same_minimum_count_table_add_with_same_minimum_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_table_add_with_same_minimum_result()
    result.success = self._handler.same_minimum_count_table_add_with_same_minimum(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("same_minimum_count_table_add_with_same_minimum", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_table_add_with_first_time_count(self, seqid, iprot, oprot):
    args = new_table_entry_array_table_add_with_first_time_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_table_add_with_first_time_count_result()
    result.success = self._handler.new_table_entry_array_table_add_with_first_time_count(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("new_table_entry_array_table_add_with_first_time_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_table_add_with_again_count(self, seqid, iprot, oprot):
    args = old_table_entry_array_table_add_with_again_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_table_add_with_again_count_result()
    result.success = self._handler.old_table_entry_array_table_add_with_again_count(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("old_table_entry_array_table_add_with_again_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_add_with_set_nhop(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_add_with_set_nhop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_add_with_set_nhop_result()
    result.success = self._handler.ipv4_lpm_table_add_with_set_nhop(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec)
    oprot.writeMessageBegin("ipv4_lpm_table_add_with_set_nhop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_add_with__drop(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_add_with__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_add_with__drop_result()
    result.success = self._handler.ipv4_lpm_table_add_with__drop(args.sess_hdl, args.dev_tgt, args.match_spec)
    oprot.writeMessageBegin("ipv4_lpm_table_add_with__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_add_with_set_dmac(self, seqid, iprot, oprot):
    args = forward_table_add_with_set_dmac_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_add_with_set_dmac_result()
    result.success = self._handler.forward_table_add_with_set_dmac(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec)
    oprot.writeMessageBegin("forward_table_add_with_set_dmac", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_add_with__drop(self, seqid, iprot, oprot):
    args = forward_table_add_with__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_add_with__drop_result()
    result.success = self._handler.forward_table_add_with__drop(args.sess_hdl, args.dev_tgt, args.match_spec)
    oprot.writeMessageBegin("forward_table_add_with__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_add_with_rewrite_mac(self, seqid, iprot, oprot):
    args = send_frame_table_add_with_rewrite_mac_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_add_with_rewrite_mac_result()
    result.success = self._handler.send_frame_table_add_with_rewrite_mac(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec)
    oprot.writeMessageBegin("send_frame_table_add_with_rewrite_mac", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_add_with__drop(self, seqid, iprot, oprot):
    args = send_frame_table_add_with__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_add_with__drop_result()
    result.success = self._handler.send_frame_table_add_with__drop(args.sess_hdl, args.dev_tgt, args.match_spec)
    oprot.writeMessageBegin("send_frame_table_add_with__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_table_add_with_do_copy_to_cpu(self, seqid, iprot, oprot):
    args = copy_to_cpu_table_add_with_do_copy_to_cpu_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_table_add_with_do_copy_to_cpu_result()
    result.success = self._handler.copy_to_cpu_table_add_with_do_copy_to_cpu(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("copy_to_cpu_table_add_with_do_copy_to_cpu", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_add_with_no_op(self, seqid, iprot, oprot):
    args = redirect_table_add_with_no_op_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_add_with_no_op_result()
    result.success = self._handler.redirect_table_add_with_no_op(args.sess_hdl, args.dev_tgt, args.match_spec)
    oprot.writeMessageBegin("redirect_table_add_with_no_op", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_add_with_do_cpu_encap(self, seqid, iprot, oprot):
    args = redirect_table_add_with_do_cpu_encap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_add_with_do_cpu_encap_result()
    result.success = self._handler.redirect_table_add_with_do_cpu_encap(args.sess_hdl, args.dev_tgt, args.match_spec)
    oprot.writeMessageBegin("redirect_table_add_with_do_cpu_encap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_add_with_no_op(self, seqid, iprot, oprot):
    args = set_myvalue_table_add_with_no_op_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_add_with_no_op_result()
    result.success = self._handler.set_myvalue_table_add_with_no_op(args.sess_hdl, args.dev_tgt, args.match_spec)
    oprot.writeMessageBegin("set_myvalue_table_add_with_no_op", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_add_with_do_set_myvalue(self, seqid, iprot, oprot):
    args = set_myvalue_table_add_with_do_set_myvalue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_add_with_do_set_myvalue_result()
    result.success = self._handler.set_myvalue_table_add_with_do_set_myvalue(args.sess_hdl, args.dev_tgt, args.match_spec)
    oprot.writeMessageBegin("set_myvalue_table_add_with_do_set_myvalue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_table_modify_with_temp(self, seqid, iprot, oprot):
    args = table_temp_table_modify_with_temp_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_table_modify_with_temp_result()
    result.success = self._handler.table_temp_table_modify_with_temp(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("table_temp_table_modify_with_temp", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_table_modify_with_min_val1(self, seqid, iprot, oprot):
    args = minimum_val1_table_modify_with_min_val1_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_table_modify_with_min_val1_result()
    result.success = self._handler.minimum_val1_table_modify_with_min_val1(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val1_table_modify_with_min_val1", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_table_modify_with_min_val2(self, seqid, iprot, oprot):
    args = minimum_val2_table_modify_with_min_val2_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_table_modify_with_min_val2_result()
    result.success = self._handler.minimum_val2_table_modify_with_min_val2(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val2_table_modify_with_min_val2", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_table_modify_with_min_val3(self, seqid, iprot, oprot):
    args = minimum_val3_table_modify_with_min_val3_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_table_modify_with_min_val3_result()
    result.success = self._handler.minimum_val3_table_modify_with_min_val3(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val3_table_modify_with_min_val3", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_table_modify_with_min_val4(self, seqid, iprot, oprot):
    args = minimum_val4_table_modify_with_min_val4_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_table_modify_with_min_val4_result()
    result.success = self._handler.minimum_val4_table_modify_with_min_val4(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val4_table_modify_with_min_val4", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_table_modify_with_same_minimum(self, seqid, iprot, oprot):
    args = same_minimum_count_table_modify_with_same_minimum_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_table_modify_with_same_minimum_result()
    result.success = self._handler.same_minimum_count_table_modify_with_same_minimum(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("same_minimum_count_table_modify_with_same_minimum", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_table_modify_with_first_time_count(self, seqid, iprot, oprot):
    args = new_table_entry_array_table_modify_with_first_time_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_table_modify_with_first_time_count_result()
    result.success = self._handler.new_table_entry_array_table_modify_with_first_time_count(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("new_table_entry_array_table_modify_with_first_time_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_table_modify_with_again_count(self, seqid, iprot, oprot):
    args = old_table_entry_array_table_modify_with_again_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_table_modify_with_again_count_result()
    result.success = self._handler.old_table_entry_array_table_modify_with_again_count(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("old_table_entry_array_table_modify_with_again_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_modify_with_set_nhop(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_modify_with_set_nhop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_modify_with_set_nhop_result()
    result.success = self._handler.ipv4_lpm_table_modify_with_set_nhop(args.sess_hdl, args.dev_id, args.entry, args.action_spec)
    oprot.writeMessageBegin("ipv4_lpm_table_modify_with_set_nhop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_modify_with__drop(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_modify_with__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_modify_with__drop_result()
    result.success = self._handler.ipv4_lpm_table_modify_with__drop(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("ipv4_lpm_table_modify_with__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_modify_with_set_dmac(self, seqid, iprot, oprot):
    args = forward_table_modify_with_set_dmac_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_modify_with_set_dmac_result()
    result.success = self._handler.forward_table_modify_with_set_dmac(args.sess_hdl, args.dev_id, args.entry, args.action_spec)
    oprot.writeMessageBegin("forward_table_modify_with_set_dmac", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_modify_with__drop(self, seqid, iprot, oprot):
    args = forward_table_modify_with__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_modify_with__drop_result()
    result.success = self._handler.forward_table_modify_with__drop(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("forward_table_modify_with__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_modify_with_rewrite_mac(self, seqid, iprot, oprot):
    args = send_frame_table_modify_with_rewrite_mac_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_modify_with_rewrite_mac_result()
    result.success = self._handler.send_frame_table_modify_with_rewrite_mac(args.sess_hdl, args.dev_id, args.entry, args.action_spec)
    oprot.writeMessageBegin("send_frame_table_modify_with_rewrite_mac", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_modify_with__drop(self, seqid, iprot, oprot):
    args = send_frame_table_modify_with__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_modify_with__drop_result()
    result.success = self._handler.send_frame_table_modify_with__drop(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("send_frame_table_modify_with__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_table_modify_with_do_copy_to_cpu(self, seqid, iprot, oprot):
    args = copy_to_cpu_table_modify_with_do_copy_to_cpu_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_table_modify_with_do_copy_to_cpu_result()
    result.success = self._handler.copy_to_cpu_table_modify_with_do_copy_to_cpu(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("copy_to_cpu_table_modify_with_do_copy_to_cpu", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_modify_with_no_op(self, seqid, iprot, oprot):
    args = redirect_table_modify_with_no_op_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_modify_with_no_op_result()
    result.success = self._handler.redirect_table_modify_with_no_op(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("redirect_table_modify_with_no_op", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_modify_with_do_cpu_encap(self, seqid, iprot, oprot):
    args = redirect_table_modify_with_do_cpu_encap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_modify_with_do_cpu_encap_result()
    result.success = self._handler.redirect_table_modify_with_do_cpu_encap(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("redirect_table_modify_with_do_cpu_encap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_modify_with_no_op(self, seqid, iprot, oprot):
    args = set_myvalue_table_modify_with_no_op_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_modify_with_no_op_result()
    result.success = self._handler.set_myvalue_table_modify_with_no_op(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("set_myvalue_table_modify_with_no_op", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_modify_with_do_set_myvalue(self, seqid, iprot, oprot):
    args = set_myvalue_table_modify_with_do_set_myvalue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_modify_with_do_set_myvalue_result()
    result.success = self._handler.set_myvalue_table_modify_with_do_set_myvalue(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("set_myvalue_table_modify_with_do_set_myvalue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_table_delete(self, seqid, iprot, oprot):
    args = table_temp_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_table_delete_result()
    result.success = self._handler.table_temp_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("table_temp_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_table_delete(self, seqid, iprot, oprot):
    args = minimum_val1_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_table_delete_result()
    result.success = self._handler.minimum_val1_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val1_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_table_delete(self, seqid, iprot, oprot):
    args = minimum_val2_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_table_delete_result()
    result.success = self._handler.minimum_val2_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val2_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_table_delete(self, seqid, iprot, oprot):
    args = minimum_val3_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_table_delete_result()
    result.success = self._handler.minimum_val3_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val3_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_table_delete(self, seqid, iprot, oprot):
    args = minimum_val4_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_table_delete_result()
    result.success = self._handler.minimum_val4_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("minimum_val4_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_table_delete(self, seqid, iprot, oprot):
    args = same_minimum_count_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_table_delete_result()
    result.success = self._handler.same_minimum_count_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("same_minimum_count_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_table_delete(self, seqid, iprot, oprot):
    args = new_table_entry_array_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_table_delete_result()
    result.success = self._handler.new_table_entry_array_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("new_table_entry_array_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_table_delete(self, seqid, iprot, oprot):
    args = old_table_entry_array_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_table_delete_result()
    result.success = self._handler.old_table_entry_array_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("old_table_entry_array_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_delete(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_delete_result()
    result.success = self._handler.ipv4_lpm_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("ipv4_lpm_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_delete(self, seqid, iprot, oprot):
    args = forward_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_delete_result()
    result.success = self._handler.forward_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("forward_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_delete(self, seqid, iprot, oprot):
    args = send_frame_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_delete_result()
    result.success = self._handler.send_frame_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("send_frame_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_table_delete(self, seqid, iprot, oprot):
    args = copy_to_cpu_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_table_delete_result()
    result.success = self._handler.copy_to_cpu_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("copy_to_cpu_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_delete(self, seqid, iprot, oprot):
    args = redirect_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_delete_result()
    result.success = self._handler.redirect_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("redirect_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_delete(self, seqid, iprot, oprot):
    args = set_myvalue_table_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_delete_result()
    result.success = self._handler.set_myvalue_table_delete(args.sess_hdl, args.dev_id, args.entry)
    oprot.writeMessageBegin("set_myvalue_table_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_get_first_entry_handle(self, seqid, iprot, oprot):
    args = table_temp_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_get_first_entry_handle_result()
    result.success = self._handler.table_temp_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("table_temp_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_get_next_entry_handles(self, seqid, iprot, oprot):
    args = table_temp_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_get_next_entry_handles_result()
    result.success = self._handler.table_temp_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("table_temp_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_get_entry(self, seqid, iprot, oprot):
    args = table_temp_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_get_entry_result()
    result.success = self._handler.table_temp_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("table_temp_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_get_first_entry_handle(self, seqid, iprot, oprot):
    args = minimum_val1_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_get_first_entry_handle_result()
    result.success = self._handler.minimum_val1_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val1_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_get_next_entry_handles(self, seqid, iprot, oprot):
    args = minimum_val1_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_get_next_entry_handles_result()
    result.success = self._handler.minimum_val1_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("minimum_val1_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_get_entry(self, seqid, iprot, oprot):
    args = minimum_val1_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_get_entry_result()
    result.success = self._handler.minimum_val1_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("minimum_val1_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_get_first_entry_handle(self, seqid, iprot, oprot):
    args = minimum_val2_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_get_first_entry_handle_result()
    result.success = self._handler.minimum_val2_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val2_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_get_next_entry_handles(self, seqid, iprot, oprot):
    args = minimum_val2_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_get_next_entry_handles_result()
    result.success = self._handler.minimum_val2_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("minimum_val2_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_get_entry(self, seqid, iprot, oprot):
    args = minimum_val2_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_get_entry_result()
    result.success = self._handler.minimum_val2_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("minimum_val2_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_get_first_entry_handle(self, seqid, iprot, oprot):
    args = minimum_val3_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_get_first_entry_handle_result()
    result.success = self._handler.minimum_val3_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val3_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_get_next_entry_handles(self, seqid, iprot, oprot):
    args = minimum_val3_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_get_next_entry_handles_result()
    result.success = self._handler.minimum_val3_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("minimum_val3_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_get_entry(self, seqid, iprot, oprot):
    args = minimum_val3_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_get_entry_result()
    result.success = self._handler.minimum_val3_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("minimum_val3_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_get_first_entry_handle(self, seqid, iprot, oprot):
    args = minimum_val4_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_get_first_entry_handle_result()
    result.success = self._handler.minimum_val4_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val4_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_get_next_entry_handles(self, seqid, iprot, oprot):
    args = minimum_val4_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_get_next_entry_handles_result()
    result.success = self._handler.minimum_val4_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("minimum_val4_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_get_entry(self, seqid, iprot, oprot):
    args = minimum_val4_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_get_entry_result()
    result.success = self._handler.minimum_val4_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("minimum_val4_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_get_first_entry_handle(self, seqid, iprot, oprot):
    args = same_minimum_count_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_get_first_entry_handle_result()
    result.success = self._handler.same_minimum_count_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("same_minimum_count_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_get_next_entry_handles(self, seqid, iprot, oprot):
    args = same_minimum_count_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_get_next_entry_handles_result()
    result.success = self._handler.same_minimum_count_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("same_minimum_count_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_get_entry(self, seqid, iprot, oprot):
    args = same_minimum_count_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_get_entry_result()
    result.success = self._handler.same_minimum_count_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("same_minimum_count_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_get_first_entry_handle(self, seqid, iprot, oprot):
    args = new_table_entry_array_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_get_first_entry_handle_result()
    result.success = self._handler.new_table_entry_array_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("new_table_entry_array_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_get_next_entry_handles(self, seqid, iprot, oprot):
    args = new_table_entry_array_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_get_next_entry_handles_result()
    result.success = self._handler.new_table_entry_array_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("new_table_entry_array_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_get_entry(self, seqid, iprot, oprot):
    args = new_table_entry_array_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_get_entry_result()
    result.success = self._handler.new_table_entry_array_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("new_table_entry_array_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_get_first_entry_handle(self, seqid, iprot, oprot):
    args = old_table_entry_array_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_get_first_entry_handle_result()
    result.success = self._handler.old_table_entry_array_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("old_table_entry_array_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_get_next_entry_handles(self, seqid, iprot, oprot):
    args = old_table_entry_array_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_get_next_entry_handles_result()
    result.success = self._handler.old_table_entry_array_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("old_table_entry_array_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_get_entry(self, seqid, iprot, oprot):
    args = old_table_entry_array_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_get_entry_result()
    result.success = self._handler.old_table_entry_array_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("old_table_entry_array_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_get_first_entry_handle(self, seqid, iprot, oprot):
    args = ipv4_lpm_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_get_first_entry_handle_result()
    result.success = self._handler.ipv4_lpm_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("ipv4_lpm_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_get_next_entry_handles(self, seqid, iprot, oprot):
    args = ipv4_lpm_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_get_next_entry_handles_result()
    result.success = self._handler.ipv4_lpm_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("ipv4_lpm_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_get_entry(self, seqid, iprot, oprot):
    args = ipv4_lpm_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_get_entry_result()
    result.success = self._handler.ipv4_lpm_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("ipv4_lpm_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_get_first_entry_handle(self, seqid, iprot, oprot):
    args = forward_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_get_first_entry_handle_result()
    result.success = self._handler.forward_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("forward_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_get_next_entry_handles(self, seqid, iprot, oprot):
    args = forward_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_get_next_entry_handles_result()
    result.success = self._handler.forward_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("forward_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_get_entry(self, seqid, iprot, oprot):
    args = forward_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_get_entry_result()
    result.success = self._handler.forward_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("forward_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_get_first_entry_handle(self, seqid, iprot, oprot):
    args = send_frame_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_get_first_entry_handle_result()
    result.success = self._handler.send_frame_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("send_frame_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_get_next_entry_handles(self, seqid, iprot, oprot):
    args = send_frame_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_get_next_entry_handles_result()
    result.success = self._handler.send_frame_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("send_frame_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_get_entry(self, seqid, iprot, oprot):
    args = send_frame_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_get_entry_result()
    result.success = self._handler.send_frame_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("send_frame_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_get_first_entry_handle(self, seqid, iprot, oprot):
    args = copy_to_cpu_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_get_first_entry_handle_result()
    result.success = self._handler.copy_to_cpu_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("copy_to_cpu_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_get_next_entry_handles(self, seqid, iprot, oprot):
    args = copy_to_cpu_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_get_next_entry_handles_result()
    result.success = self._handler.copy_to_cpu_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("copy_to_cpu_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_get_entry(self, seqid, iprot, oprot):
    args = copy_to_cpu_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_get_entry_result()
    result.success = self._handler.copy_to_cpu_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("copy_to_cpu_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_get_first_entry_handle(self, seqid, iprot, oprot):
    args = redirect_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_get_first_entry_handle_result()
    result.success = self._handler.redirect_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("redirect_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_get_next_entry_handles(self, seqid, iprot, oprot):
    args = redirect_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_get_next_entry_handles_result()
    result.success = self._handler.redirect_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("redirect_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_get_entry(self, seqid, iprot, oprot):
    args = redirect_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_get_entry_result()
    result.success = self._handler.redirect_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("redirect_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_get_first_entry_handle(self, seqid, iprot, oprot):
    args = set_myvalue_get_first_entry_handle_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_get_first_entry_handle_result()
    result.success = self._handler.set_myvalue_get_first_entry_handle(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("set_myvalue_get_first_entry_handle", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_get_next_entry_handles(self, seqid, iprot, oprot):
    args = set_myvalue_get_next_entry_handles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_get_next_entry_handles_result()
    result.success = self._handler.set_myvalue_get_next_entry_handles(args.sess_hdl, args.dev_id, args.entry_hdl, args.n)
    oprot.writeMessageBegin("set_myvalue_get_next_entry_handles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_get_entry(self, seqid, iprot, oprot):
    args = set_myvalue_get_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_get_entry_result()
    result.success = self._handler.set_myvalue_get_entry(args.sess_hdl, args.dev_id, args.entry_hdl)
    oprot.writeMessageBegin("set_myvalue_get_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_set_default_action_temp(self, seqid, iprot, oprot):
    args = table_temp_set_default_action_temp_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_set_default_action_temp_result()
    result.success = self._handler.table_temp_set_default_action_temp(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("table_temp_set_default_action_temp", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_set_default_action_min_val1(self, seqid, iprot, oprot):
    args = minimum_val1_set_default_action_min_val1_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_set_default_action_min_val1_result()
    result.success = self._handler.minimum_val1_set_default_action_min_val1(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val1_set_default_action_min_val1", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_set_default_action_min_val2(self, seqid, iprot, oprot):
    args = minimum_val2_set_default_action_min_val2_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_set_default_action_min_val2_result()
    result.success = self._handler.minimum_val2_set_default_action_min_val2(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val2_set_default_action_min_val2", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_set_default_action_min_val3(self, seqid, iprot, oprot):
    args = minimum_val3_set_default_action_min_val3_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_set_default_action_min_val3_result()
    result.success = self._handler.minimum_val3_set_default_action_min_val3(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val3_set_default_action_min_val3", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_set_default_action_min_val4(self, seqid, iprot, oprot):
    args = minimum_val4_set_default_action_min_val4_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_set_default_action_min_val4_result()
    result.success = self._handler.minimum_val4_set_default_action_min_val4(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val4_set_default_action_min_val4", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_set_default_action_same_minimum(self, seqid, iprot, oprot):
    args = same_minimum_count_set_default_action_same_minimum_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_set_default_action_same_minimum_result()
    result.success = self._handler.same_minimum_count_set_default_action_same_minimum(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("same_minimum_count_set_default_action_same_minimum", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_set_default_action_first_time_count(self, seqid, iprot, oprot):
    args = new_table_entry_array_set_default_action_first_time_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_set_default_action_first_time_count_result()
    result.success = self._handler.new_table_entry_array_set_default_action_first_time_count(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("new_table_entry_array_set_default_action_first_time_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_set_default_action_again_count(self, seqid, iprot, oprot):
    args = old_table_entry_array_set_default_action_again_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_set_default_action_again_count_result()
    result.success = self._handler.old_table_entry_array_set_default_action_again_count(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("old_table_entry_array_set_default_action_again_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_set_default_action_set_nhop(self, seqid, iprot, oprot):
    args = ipv4_lpm_set_default_action_set_nhop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_set_default_action_set_nhop_result()
    result.success = self._handler.ipv4_lpm_set_default_action_set_nhop(args.sess_hdl, args.dev_tgt, args.action_spec)
    oprot.writeMessageBegin("ipv4_lpm_set_default_action_set_nhop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_set_default_action__drop(self, seqid, iprot, oprot):
    args = ipv4_lpm_set_default_action__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_set_default_action__drop_result()
    result.success = self._handler.ipv4_lpm_set_default_action__drop(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("ipv4_lpm_set_default_action__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_set_default_action_set_dmac(self, seqid, iprot, oprot):
    args = forward_set_default_action_set_dmac_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_set_default_action_set_dmac_result()
    result.success = self._handler.forward_set_default_action_set_dmac(args.sess_hdl, args.dev_tgt, args.action_spec)
    oprot.writeMessageBegin("forward_set_default_action_set_dmac", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_set_default_action__drop(self, seqid, iprot, oprot):
    args = forward_set_default_action__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_set_default_action__drop_result()
    result.success = self._handler.forward_set_default_action__drop(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("forward_set_default_action__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_set_default_action_rewrite_mac(self, seqid, iprot, oprot):
    args = send_frame_set_default_action_rewrite_mac_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_set_default_action_rewrite_mac_result()
    result.success = self._handler.send_frame_set_default_action_rewrite_mac(args.sess_hdl, args.dev_tgt, args.action_spec)
    oprot.writeMessageBegin("send_frame_set_default_action_rewrite_mac", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_set_default_action__drop(self, seqid, iprot, oprot):
    args = send_frame_set_default_action__drop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_set_default_action__drop_result()
    result.success = self._handler.send_frame_set_default_action__drop(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("send_frame_set_default_action__drop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_set_default_action_do_copy_to_cpu(self, seqid, iprot, oprot):
    args = copy_to_cpu_set_default_action_do_copy_to_cpu_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_set_default_action_do_copy_to_cpu_result()
    result.success = self._handler.copy_to_cpu_set_default_action_do_copy_to_cpu(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("copy_to_cpu_set_default_action_do_copy_to_cpu", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_set_default_action_no_op(self, seqid, iprot, oprot):
    args = redirect_set_default_action_no_op_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_set_default_action_no_op_result()
    result.success = self._handler.redirect_set_default_action_no_op(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("redirect_set_default_action_no_op", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_set_default_action_do_cpu_encap(self, seqid, iprot, oprot):
    args = redirect_set_default_action_do_cpu_encap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_set_default_action_do_cpu_encap_result()
    result.success = self._handler.redirect_set_default_action_do_cpu_encap(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("redirect_set_default_action_do_cpu_encap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_set_default_action_no_op(self, seqid, iprot, oprot):
    args = set_myvalue_set_default_action_no_op_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_set_default_action_no_op_result()
    result.success = self._handler.set_myvalue_set_default_action_no_op(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("set_myvalue_set_default_action_no_op", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_set_default_action_do_set_myvalue(self, seqid, iprot, oprot):
    args = set_myvalue_set_default_action_do_set_myvalue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_set_default_action_do_set_myvalue_result()
    result.success = self._handler.set_myvalue_set_default_action_do_set_myvalue(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("set_myvalue_set_default_action_do_set_myvalue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clean_all(self, seqid, iprot, oprot):
    args = clean_all_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clean_all_result()
    result.success = self._handler.clean_all(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("clean_all", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_tables_clean_all(self, seqid, iprot, oprot):
    args = tables_clean_all_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = tables_clean_all_result()
    result.success = self._handler.tables_clean_all(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("tables_clean_all", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = table_temp_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_table_read_bytes_counter_hit_result()
    result.success = self._handler.table_temp_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("table_temp_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = table_temp_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_table_read_bytes_counter_miss_result()
    result.success = self._handler.table_temp_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("table_temp_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val1_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_table_read_bytes_counter_hit_result()
    result.success = self._handler.minimum_val1_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val1_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val1_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_table_read_bytes_counter_miss_result()
    result.success = self._handler.minimum_val1_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val1_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val2_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_table_read_bytes_counter_hit_result()
    result.success = self._handler.minimum_val2_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val2_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val2_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_table_read_bytes_counter_miss_result()
    result.success = self._handler.minimum_val2_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val2_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val3_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_table_read_bytes_counter_hit_result()
    result.success = self._handler.minimum_val3_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val3_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val3_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_table_read_bytes_counter_miss_result()
    result.success = self._handler.minimum_val3_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val3_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val4_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_table_read_bytes_counter_hit_result()
    result.success = self._handler.minimum_val4_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val4_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val4_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_table_read_bytes_counter_miss_result()
    result.success = self._handler.minimum_val4_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val4_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = same_minimum_count_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_table_read_bytes_counter_hit_result()
    result.success = self._handler.same_minimum_count_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("same_minimum_count_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = same_minimum_count_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_table_read_bytes_counter_miss_result()
    result.success = self._handler.same_minimum_count_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("same_minimum_count_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = new_table_entry_array_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_table_read_bytes_counter_hit_result()
    result.success = self._handler.new_table_entry_array_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("new_table_entry_array_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = new_table_entry_array_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_table_read_bytes_counter_miss_result()
    result.success = self._handler.new_table_entry_array_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("new_table_entry_array_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = old_table_entry_array_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_table_read_bytes_counter_hit_result()
    result.success = self._handler.old_table_entry_array_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("old_table_entry_array_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = old_table_entry_array_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_table_read_bytes_counter_miss_result()
    result.success = self._handler.old_table_entry_array_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("old_table_entry_array_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_read_bytes_counter_hit_result()
    result.success = self._handler.ipv4_lpm_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("ipv4_lpm_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_read_bytes_counter_miss_result()
    result.success = self._handler.ipv4_lpm_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("ipv4_lpm_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = forward_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_read_bytes_counter_hit_result()
    result.success = self._handler.forward_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("forward_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = forward_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_read_bytes_counter_miss_result()
    result.success = self._handler.forward_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("forward_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = send_frame_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_read_bytes_counter_hit_result()
    result.success = self._handler.send_frame_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("send_frame_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = send_frame_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_read_bytes_counter_miss_result()
    result.success = self._handler.send_frame_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("send_frame_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = copy_to_cpu_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_table_read_bytes_counter_hit_result()
    result.success = self._handler.copy_to_cpu_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("copy_to_cpu_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = copy_to_cpu_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_table_read_bytes_counter_miss_result()
    result.success = self._handler.copy_to_cpu_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("copy_to_cpu_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = redirect_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_read_bytes_counter_hit_result()
    result.success = self._handler.redirect_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("redirect_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = redirect_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_read_bytes_counter_miss_result()
    result.success = self._handler.redirect_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("redirect_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_read_bytes_counter_hit(self, seqid, iprot, oprot):
    args = set_myvalue_table_read_bytes_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_read_bytes_counter_hit_result()
    result.success = self._handler.set_myvalue_table_read_bytes_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("set_myvalue_table_read_bytes_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_read_bytes_counter_miss(self, seqid, iprot, oprot):
    args = set_myvalue_table_read_bytes_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_read_bytes_counter_miss_result()
    result.success = self._handler.set_myvalue_table_read_bytes_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("set_myvalue_table_read_bytes_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = table_temp_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_table_read_packets_counter_hit_result()
    result.success = self._handler.table_temp_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("table_temp_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_table_temp_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = table_temp_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = table_temp_table_read_packets_counter_miss_result()
    result.success = self._handler.table_temp_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("table_temp_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val1_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_table_read_packets_counter_hit_result()
    result.success = self._handler.minimum_val1_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val1_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val1_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val1_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val1_table_read_packets_counter_miss_result()
    result.success = self._handler.minimum_val1_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val1_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val2_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_table_read_packets_counter_hit_result()
    result.success = self._handler.minimum_val2_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val2_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val2_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val2_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val2_table_read_packets_counter_miss_result()
    result.success = self._handler.minimum_val2_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val2_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val3_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_table_read_packets_counter_hit_result()
    result.success = self._handler.minimum_val3_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val3_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val3_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val3_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val3_table_read_packets_counter_miss_result()
    result.success = self._handler.minimum_val3_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val3_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = minimum_val4_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_table_read_packets_counter_hit_result()
    result.success = self._handler.minimum_val4_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val4_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_minimum_val4_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = minimum_val4_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = minimum_val4_table_read_packets_counter_miss_result()
    result.success = self._handler.minimum_val4_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("minimum_val4_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = same_minimum_count_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_table_read_packets_counter_hit_result()
    result.success = self._handler.same_minimum_count_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("same_minimum_count_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_same_minimum_count_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = same_minimum_count_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = same_minimum_count_table_read_packets_counter_miss_result()
    result.success = self._handler.same_minimum_count_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("same_minimum_count_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = new_table_entry_array_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_table_read_packets_counter_hit_result()
    result.success = self._handler.new_table_entry_array_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("new_table_entry_array_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_new_table_entry_array_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = new_table_entry_array_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = new_table_entry_array_table_read_packets_counter_miss_result()
    result.success = self._handler.new_table_entry_array_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("new_table_entry_array_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = old_table_entry_array_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_table_read_packets_counter_hit_result()
    result.success = self._handler.old_table_entry_array_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("old_table_entry_array_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_old_table_entry_array_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = old_table_entry_array_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = old_table_entry_array_table_read_packets_counter_miss_result()
    result.success = self._handler.old_table_entry_array_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("old_table_entry_array_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_read_packets_counter_hit_result()
    result.success = self._handler.ipv4_lpm_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("ipv4_lpm_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ipv4_lpm_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = ipv4_lpm_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ipv4_lpm_table_read_packets_counter_miss_result()
    result.success = self._handler.ipv4_lpm_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("ipv4_lpm_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = forward_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_read_packets_counter_hit_result()
    result.success = self._handler.forward_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("forward_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forward_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = forward_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forward_table_read_packets_counter_miss_result()
    result.success = self._handler.forward_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("forward_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = send_frame_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_read_packets_counter_hit_result()
    result.success = self._handler.send_frame_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("send_frame_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_send_frame_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = send_frame_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = send_frame_table_read_packets_counter_miss_result()
    result.success = self._handler.send_frame_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("send_frame_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = copy_to_cpu_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_table_read_packets_counter_hit_result()
    result.success = self._handler.copy_to_cpu_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("copy_to_cpu_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copy_to_cpu_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = copy_to_cpu_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copy_to_cpu_table_read_packets_counter_miss_result()
    result.success = self._handler.copy_to_cpu_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("copy_to_cpu_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = redirect_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_read_packets_counter_hit_result()
    result.success = self._handler.redirect_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("redirect_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_redirect_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = redirect_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = redirect_table_read_packets_counter_miss_result()
    result.success = self._handler.redirect_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("redirect_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_read_packets_counter_hit(self, seqid, iprot, oprot):
    args = set_myvalue_table_read_packets_counter_hit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_read_packets_counter_hit_result()
    result.success = self._handler.set_myvalue_table_read_packets_counter_hit(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("set_myvalue_table_read_packets_counter_hit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_myvalue_table_read_packets_counter_miss(self, seqid, iprot, oprot):
    args = set_myvalue_table_read_packets_counter_miss_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_myvalue_table_read_packets_counter_miss_result()
    result.success = self._handler.set_myvalue_table_read_packets_counter_miss(args.sess_hdl, args.dev_tgt)
    oprot.writeMessageBegin("set_myvalue_table_read_packets_counter_miss", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mirroring_mapping_add(self, seqid, iprot, oprot):
    args = mirroring_mapping_add_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mirroring_mapping_add_result()
    result.success = self._handler.mirroring_mapping_add(args.mirror_id, args.egress_port)
    oprot.writeMessageBegin("mirroring_mapping_add", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mirroring_mapping_delete(self, seqid, iprot, oprot):
    args = mirroring_mapping_delete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mirroring_mapping_delete_result()
    result.success = self._handler.mirroring_mapping_delete(args.mirror_id)
    oprot.writeMessageBegin("mirroring_mapping_delete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mirroring_mapping_get_egress_port(self, seqid, iprot, oprot):
    args = mirroring_mapping_get_egress_port_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mirroring_mapping_get_egress_port_result()
    result.success = self._handler.mirroring_mapping_get_egress_port(args.mirror_id)
    oprot.writeMessageBegin("mirroring_mapping_get_egress_port", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_learning_timeout(self, seqid, iprot, oprot):
    args = set_learning_timeout_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_learning_timeout_result()
    self._handler.set_learning_timeout(args.sess_hdl, args.dev_id, args.msecs)
    oprot.writeMessageBegin("set_learning_timeout", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class table_temp_table_add_with_temp_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_add_with_temp_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_add_with_temp_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_add_with_temp_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_add_with_min_val1_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_add_with_min_val1_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_add_with_min_val1_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_add_with_min_val1_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_add_with_min_val2_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_add_with_min_val2_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_add_with_min_val2_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_add_with_min_val2_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_add_with_min_val3_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_add_with_min_val3_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_add_with_min_val3_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_add_with_min_val3_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_add_with_min_val4_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_add_with_min_val4_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_add_with_min_val4_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_add_with_min_val4_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_add_with_same_minimum_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_add_with_same_minimum_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_add_with_same_minimum_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_add_with_same_minimum_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_add_with_first_time_count_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_add_with_first_time_count_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_add_with_first_time_count_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_add_with_first_time_count_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_add_with_again_count_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_add_with_again_count_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_add_with_again_count_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_add_with_again_count_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_add_with_set_nhop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_ipv4_lpm_match_spec_t, sketch_ipv4_lpm_match_spec_t.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'action_spec', (sketch_set_nhop_action_spec_t, sketch_set_nhop_action_spec_t.thrift_spec), None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_ipv4_lpm_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_set_nhop_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_add_with_set_nhop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 4)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_add_with_set_nhop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_add_with_set_nhop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_add_with__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_ipv4_lpm_match_spec_t, sketch_ipv4_lpm_match_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_ipv4_lpm_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_add_with__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_add_with__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_add_with__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_add_with_set_dmac_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_forward_match_spec_t, sketch_forward_match_spec_t.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'action_spec', (sketch_set_dmac_action_spec_t, sketch_set_dmac_action_spec_t.thrift_spec), None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_forward_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_set_dmac_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_add_with_set_dmac_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 4)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_add_with_set_dmac_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_add_with_set_dmac_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_add_with__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_forward_match_spec_t, sketch_forward_match_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_forward_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_add_with__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_add_with__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_add_with__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_add_with_rewrite_mac_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_send_frame_match_spec_t, sketch_send_frame_match_spec_t.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'action_spec', (sketch_rewrite_mac_action_spec_t, sketch_rewrite_mac_action_spec_t.thrift_spec), None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_send_frame_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_rewrite_mac_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_add_with_rewrite_mac_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 4)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_add_with_rewrite_mac_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_add_with_rewrite_mac_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_add_with__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_send_frame_match_spec_t, sketch_send_frame_match_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_send_frame_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_add_with__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_add_with__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_add_with__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_add_with_do_copy_to_cpu_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_add_with_do_copy_to_cpu_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_add_with_do_copy_to_cpu_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_add_with_do_copy_to_cpu_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_add_with_no_op_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_redirect_match_spec_t, sketch_redirect_match_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_redirect_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_add_with_no_op_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_add_with_no_op_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_add_with_no_op_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_add_with_do_cpu_encap_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_redirect_match_spec_t, sketch_redirect_match_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_redirect_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_add_with_do_cpu_encap_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_add_with_do_cpu_encap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_add_with_do_cpu_encap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_add_with_no_op_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_set_myvalue_match_spec_t, sketch_set_myvalue_match_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_set_myvalue_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_add_with_no_op_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_add_with_no_op_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_add_with_no_op_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_add_with_do_set_myvalue_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - match_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'match_spec', (sketch_set_myvalue_match_spec_t, sketch_set_myvalue_match_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, match_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.match_spec = match_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.match_spec = sketch_set_myvalue_match_spec_t()
          self.match_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_add_with_do_set_myvalue_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.match_spec is not None:
      oprot.writeFieldBegin('match_spec', TType.STRUCT, 3)
      self.match_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.match_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_add_with_do_set_myvalue_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_add_with_do_set_myvalue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_modify_with_temp_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_modify_with_temp_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_modify_with_temp_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_modify_with_temp_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_modify_with_min_val1_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_modify_with_min_val1_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_modify_with_min_val1_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_modify_with_min_val1_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_modify_with_min_val2_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_modify_with_min_val2_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_modify_with_min_val2_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_modify_with_min_val2_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_modify_with_min_val3_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_modify_with_min_val3_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_modify_with_min_val3_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_modify_with_min_val3_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_modify_with_min_val4_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_modify_with_min_val4_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_modify_with_min_val4_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_modify_with_min_val4_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_modify_with_same_minimum_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_modify_with_same_minimum_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_modify_with_same_minimum_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_modify_with_same_minimum_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_modify_with_first_time_count_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_modify_with_first_time_count_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_modify_with_first_time_count_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_modify_with_first_time_count_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_modify_with_again_count_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_modify_with_again_count_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_modify_with_again_count_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_modify_with_again_count_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_modify_with_set_nhop_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
    (4, TType.STRUCT, 'action_spec', (sketch_set_nhop_action_spec_t, sketch_set_nhop_action_spec_t.thrift_spec), None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_set_nhop_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_modify_with_set_nhop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 4)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_modify_with_set_nhop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_modify_with_set_nhop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_modify_with__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_modify_with__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_modify_with__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_modify_with__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_modify_with_set_dmac_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
    (4, TType.STRUCT, 'action_spec', (sketch_set_dmac_action_spec_t, sketch_set_dmac_action_spec_t.thrift_spec), None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_set_dmac_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_modify_with_set_dmac_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 4)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_modify_with_set_dmac_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_modify_with_set_dmac_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_modify_with__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_modify_with__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_modify_with__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_modify_with__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_modify_with_rewrite_mac_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
    (4, TType.STRUCT, 'action_spec', (sketch_rewrite_mac_action_spec_t, sketch_rewrite_mac_action_spec_t.thrift_spec), None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_rewrite_mac_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_modify_with_rewrite_mac_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 4)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_modify_with_rewrite_mac_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_modify_with_rewrite_mac_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_modify_with__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_modify_with__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_modify_with__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_modify_with__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_modify_with_do_copy_to_cpu_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_modify_with_do_copy_to_cpu_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_modify_with_do_copy_to_cpu_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_modify_with_do_copy_to_cpu_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_modify_with_no_op_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_modify_with_no_op_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_modify_with_no_op_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_modify_with_no_op_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_modify_with_do_cpu_encap_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_modify_with_do_cpu_encap_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_modify_with_do_cpu_encap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_modify_with_do_cpu_encap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_modify_with_no_op_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_modify_with_no_op_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_modify_with_no_op_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_modify_with_no_op_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_modify_with_do_set_myvalue_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_modify_with_do_set_myvalue_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_modify_with_do_set_myvalue_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_modify_with_do_set_myvalue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_delete_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry = entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_delete_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry is not None:
      oprot.writeFieldBegin('entry', TType.I32, 3)
      oprot.writeI32(self.entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter6 in self.success:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter13 in self.success:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter20 in self.success:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32();
            self.success.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter27 in self.success:
        oprot.writeI32(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32();
            self.success.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter34 in self.success:
        oprot.writeI32(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI32();
            self.success.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter41 in self.success:
        oprot.writeI32(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readI32();
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter48 in self.success:
        oprot.writeI32(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readI32();
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter55 in self.success:
        oprot.writeI32(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readI32();
            self.success.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter62 in self.success:
        oprot.writeI32(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readI32();
            self.success.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter69 in self.success:
        oprot.writeI32(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = iprot.readI32();
            self.success.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter76 in self.success:
        oprot.writeI32(iter76)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = iprot.readI32();
            self.success.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter83 in self.success:
        oprot.writeI32(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = iprot.readI32();
            self.success.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter90 in self.success:
        oprot.writeI32(iter90)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_get_first_entry_handle_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_get_first_entry_handle_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_get_first_entry_handle_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_get_first_entry_handle_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_get_next_entry_handles_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
   - n
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
    (4, TType.I32, 'n', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None, n=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl
    self.n = n

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.n = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_get_next_entry_handles_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    if self.n is not None:
      oprot.writeFieldBegin('n', TType.I32, 4)
      oprot.writeI32(self.n)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    value = (value * 31) ^ hash(self.n)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_get_next_entry_handles_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = iprot.readI32();
            self.success.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_get_next_entry_handles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter97 in self.success:
        oprot.writeI32(iter97)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_get_entry_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - entry_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'entry_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, entry_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.entry_hdl = entry_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.entry_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_get_entry_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.entry_hdl is not None:
      oprot.writeFieldBegin('entry_hdl', TType.I32, 3)
      oprot.writeI32(self.entry_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.entry_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_get_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_get_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_set_default_action_temp_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_set_default_action_temp_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_set_default_action_temp_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_set_default_action_temp_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_set_default_action_min_val1_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_set_default_action_min_val1_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_set_default_action_min_val1_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_set_default_action_min_val1_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_set_default_action_min_val2_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_set_default_action_min_val2_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_set_default_action_min_val2_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_set_default_action_min_val2_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_set_default_action_min_val3_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_set_default_action_min_val3_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_set_default_action_min_val3_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_set_default_action_min_val3_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_set_default_action_min_val4_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_set_default_action_min_val4_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_set_default_action_min_val4_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_set_default_action_min_val4_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_set_default_action_same_minimum_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_set_default_action_same_minimum_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_set_default_action_same_minimum_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_set_default_action_same_minimum_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_set_default_action_first_time_count_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_set_default_action_first_time_count_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_set_default_action_first_time_count_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_set_default_action_first_time_count_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_set_default_action_again_count_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_set_default_action_again_count_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_set_default_action_again_count_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_set_default_action_again_count_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_set_default_action_set_nhop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'action_spec', (sketch_set_nhop_action_spec_t, sketch_set_nhop_action_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_set_nhop_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_set_default_action_set_nhop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 3)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_set_default_action_set_nhop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_set_default_action_set_nhop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_set_default_action__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_set_default_action__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_set_default_action__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_set_default_action__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_set_default_action_set_dmac_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'action_spec', (sketch_set_dmac_action_spec_t, sketch_set_dmac_action_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_set_dmac_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_set_default_action_set_dmac_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 3)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_set_default_action_set_dmac_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_set_default_action_set_dmac_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_set_default_action__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_set_default_action__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_set_default_action__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_set_default_action__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_set_default_action_rewrite_mac_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
   - action_spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'action_spec', (sketch_rewrite_mac_action_spec_t, sketch_rewrite_mac_action_spec_t.thrift_spec), None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_tgt=None, action_spec=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt
    self.action_spec = action_spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.action_spec = sketch_rewrite_mac_action_spec_t()
          self.action_spec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_set_default_action_rewrite_mac_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    if self.action_spec is not None:
      oprot.writeFieldBegin('action_spec', TType.STRUCT, 3)
      self.action_spec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    value = (value * 31) ^ hash(self.action_spec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_set_default_action_rewrite_mac_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_set_default_action_rewrite_mac_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_set_default_action__drop_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_set_default_action__drop_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_set_default_action__drop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_set_default_action__drop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_set_default_action_do_copy_to_cpu_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_set_default_action_do_copy_to_cpu_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_set_default_action_do_copy_to_cpu_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_set_default_action_do_copy_to_cpu_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_set_default_action_no_op_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_set_default_action_no_op_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_set_default_action_no_op_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_set_default_action_no_op_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_set_default_action_do_cpu_encap_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_set_default_action_do_cpu_encap_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_set_default_action_do_cpu_encap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_set_default_action_do_cpu_encap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_set_default_action_no_op_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_set_default_action_no_op_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_set_default_action_no_op_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_set_default_action_no_op_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_set_default_action_do_set_myvalue_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_set_default_action_do_set_myvalue_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_set_default_action_do_set_myvalue_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_set_default_action_do_set_myvalue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clean_all_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clean_all_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clean_all_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clean_all_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class tables_clean_all_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('tables_clean_all_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class tables_clean_all_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('tables_clean_all_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_bytes_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_bytes_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_bytes_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_bytes_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_bytes_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_bytes_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_bytes_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_bytes_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class table_temp_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('table_temp_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val1_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val1_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val2_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val2_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val3_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val3_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class minimum_val4_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('minimum_val4_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class same_minimum_count_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('same_minimum_count_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class new_table_entry_array_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('new_table_entry_array_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class old_table_entry_array_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('old_table_entry_array_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ipv4_lpm_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ipv4_lpm_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forward_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forward_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class send_frame_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('send_frame_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copy_to_cpu_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copy_to_cpu_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class redirect_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('redirect_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_packets_counter_hit_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_packets_counter_hit_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_packets_counter_hit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_packets_counter_hit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_packets_counter_miss_args:
  """
  Attributes:
   - sess_hdl
   - dev_tgt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.STRUCT, 'dev_tgt', (res_pd_rpc.ttypes.DevTarget_t, res_pd_rpc.ttypes.DevTarget_t.thrift_spec), None, ), # 2
  )

  def __init__(self, sess_hdl=None, dev_tgt=None,):
    self.sess_hdl = sess_hdl
    self.dev_tgt = dev_tgt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dev_tgt = res_pd_rpc.ttypes.DevTarget_t()
          self.dev_tgt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_packets_counter_miss_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_tgt is not None:
      oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
      self.dev_tgt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_tgt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_myvalue_table_read_packets_counter_miss_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_myvalue_table_read_packets_counter_miss_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mirroring_mapping_add_args:
  """
  Attributes:
   - mirror_id
   - egress_port
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mirror_id', None, None, ), # 1
    (2, TType.I32, 'egress_port', None, None, ), # 2
  )

  def __init__(self, mirror_id=None, egress_port=None,):
    self.mirror_id = mirror_id
    self.egress_port = egress_port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mirror_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.egress_port = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mirroring_mapping_add_args')
    if self.mirror_id is not None:
      oprot.writeFieldBegin('mirror_id', TType.I32, 1)
      oprot.writeI32(self.mirror_id)
      oprot.writeFieldEnd()
    if self.egress_port is not None:
      oprot.writeFieldBegin('egress_port', TType.I32, 2)
      oprot.writeI32(self.egress_port)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mirror_id)
    value = (value * 31) ^ hash(self.egress_port)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mirroring_mapping_add_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mirroring_mapping_add_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mirroring_mapping_delete_args:
  """
  Attributes:
   - mirror_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mirror_id', None, None, ), # 1
  )

  def __init__(self, mirror_id=None,):
    self.mirror_id = mirror_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mirror_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mirroring_mapping_delete_args')
    if self.mirror_id is not None:
      oprot.writeFieldBegin('mirror_id', TType.I32, 1)
      oprot.writeI32(self.mirror_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mirror_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mirroring_mapping_delete_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mirroring_mapping_delete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mirroring_mapping_get_egress_port_args:
  """
  Attributes:
   - mirror_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mirror_id', None, None, ), # 1
  )

  def __init__(self, mirror_id=None,):
    self.mirror_id = mirror_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mirror_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mirroring_mapping_get_egress_port_args')
    if self.mirror_id is not None:
      oprot.writeFieldBegin('mirror_id', TType.I32, 1)
      oprot.writeI32(self.mirror_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mirror_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mirroring_mapping_get_egress_port_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mirroring_mapping_get_egress_port_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_learning_timeout_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - msecs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.BYTE, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'msecs', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, msecs=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.msecs = msecs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.msecs = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_learning_timeout_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 2)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.msecs is not None:
      oprot.writeFieldBegin('msecs', TType.I32, 3)
      oprot.writeI32(self.msecs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.msecs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_learning_timeout_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_learning_timeout_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
