#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class P4LogLevel_t:
  P4_LOG_LEVEL_NONE = 0
  P4_LOG_LEVEL_FATAL = 1
  P4_LOG_LEVEL_ERROR = 2
  P4_LOG_LEVEL_WARN = 3
  P4_LOG_LEVEL_INFO = 4
  P4_LOG_LEVEL_VERBOSE = 5
  P4_LOG_LEVEL_TRACE = 6

  _VALUES_TO_NAMES = {
    0: "P4_LOG_LEVEL_NONE",
    1: "P4_LOG_LEVEL_FATAL",
    2: "P4_LOG_LEVEL_ERROR",
    3: "P4_LOG_LEVEL_WARN",
    4: "P4_LOG_LEVEL_INFO",
    5: "P4_LOG_LEVEL_VERBOSE",
    6: "P4_LOG_LEVEL_TRACE",
  }

  _NAMES_TO_VALUES = {
    "P4_LOG_LEVEL_NONE": 0,
    "P4_LOG_LEVEL_FATAL": 1,
    "P4_LOG_LEVEL_ERROR": 2,
    "P4_LOG_LEVEL_WARN": 3,
    "P4_LOG_LEVEL_INFO": 4,
    "P4_LOG_LEVEL_VERBOSE": 5,
    "P4_LOG_LEVEL_TRACE": 6,
  }


class DevTarget_t:
  """
  Attributes:
   - dev_id
   - dev_pipe_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'dev_id', None, None, ), # 1
    (2, TType.I16, 'dev_pipe_id', None, None, ), # 2
  )

  def __init__(self, dev_id=None, dev_pipe_id=None,):
    self.dev_id = dev_id
    self.dev_pipe_id = dev_pipe_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.dev_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.dev_pipe_id = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DevTarget_t')
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.BYTE, 1)
      oprot.writeByte(self.dev_id)
      oprot.writeFieldEnd()
    if self.dev_pipe_id is not None:
      oprot.writeFieldBegin('dev_pipe_id', TType.I16, 2)
      oprot.writeI16(self.dev_pipe_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dev_id is None:
      raise TProtocol.TProtocolException(message='Required field dev_id is unset!')
    if self.dev_pipe_id is None:
      raise TProtocol.TProtocolException(message='Required field dev_pipe_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.dev_pipe_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
