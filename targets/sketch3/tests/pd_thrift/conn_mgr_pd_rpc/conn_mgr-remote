#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from conn_mgr_pd_rpc import conn_mgr
from conn_mgr_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void echo(string s)')
  print('  void init()')
  print('  void cleanup()')
  print('  SessionHandle_t client_init(i32 max_txn_size)')
  print('  i32 client_cleanup(SessionHandle_t sess_hdl)')
  print('  i32 begin_txn(SessionHandle_t sess_hdl, bool isAtomic, bool isHighPri)')
  print('  i32 verify_txn(SessionHandle_t sess_hdl)')
  print('  i32 abort_txn(SessionHandle_t sess_hdl)')
  print('  i32 commit_txn(SessionHandle_t sess_hdl, bool hwSynchronous)')
  print('  i32 complete_operations(SessionHandle_t sess_hdl)')
  print('  void rmt_log_level_set(P4LogLevel_t log_level)')
  print('  P4LogLevel_t rmt_log_level_get()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = conn_mgr.Client(protocol)
transport.open()

if cmd == 'echo':
  if len(args) != 1:
    print('echo requires 1 args')
    sys.exit(1)
  pp.pprint(client.echo(args[0],))

elif cmd == 'init':
  if len(args) != 0:
    print('init requires 0 args')
    sys.exit(1)
  pp.pprint(client.init())

elif cmd == 'cleanup':
  if len(args) != 0:
    print('cleanup requires 0 args')
    sys.exit(1)
  pp.pprint(client.cleanup())

elif cmd == 'client_init':
  if len(args) != 1:
    print('client_init requires 1 args')
    sys.exit(1)
  pp.pprint(client.client_init(eval(args[0]),))

elif cmd == 'client_cleanup':
  if len(args) != 1:
    print('client_cleanup requires 1 args')
    sys.exit(1)
  pp.pprint(client.client_cleanup(eval(args[0]),))

elif cmd == 'begin_txn':
  if len(args) != 3:
    print('begin_txn requires 3 args')
    sys.exit(1)
  pp.pprint(client.begin_txn(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'verify_txn':
  if len(args) != 1:
    print('verify_txn requires 1 args')
    sys.exit(1)
  pp.pprint(client.verify_txn(eval(args[0]),))

elif cmd == 'abort_txn':
  if len(args) != 1:
    print('abort_txn requires 1 args')
    sys.exit(1)
  pp.pprint(client.abort_txn(eval(args[0]),))

elif cmd == 'commit_txn':
  if len(args) != 2:
    print('commit_txn requires 2 args')
    sys.exit(1)
  pp.pprint(client.commit_txn(eval(args[0]),eval(args[1]),))

elif cmd == 'complete_operations':
  if len(args) != 1:
    print('complete_operations requires 1 args')
    sys.exit(1)
  pp.pprint(client.complete_operations(eval(args[0]),))

elif cmd == 'rmt_log_level_set':
  if len(args) != 1:
    print('rmt_log_level_set requires 1 args')
    sys.exit(1)
  pp.pprint(client.rmt_log_level_set(eval(args[0]),))

elif cmd == 'rmt_log_level_get':
  if len(args) != 0:
    print('rmt_log_level_get requires 0 args')
    sys.exit(1)
  pp.pprint(client.rmt_log_level_get())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
