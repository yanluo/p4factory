#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def mc_init(self):
    pass

  def mc_create_session(self):
    pass

  def mc_destroy_session(self, sess_hdl):
    """
    Parameters:
     - sess_hdl
    """
    pass

  def mc_mgrp_create(self, sess_hdl, dev_id, mgid):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - mgid
    """
    pass

  def mc_mgrp_destroy(self, sess_hdl, dev_id, grp_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - grp_hdl
    """
    pass

  def mc_node_create(self, sess_hdl, dev_id, rid, port_map, lag_map):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - rid
     - port_map
     - lag_map
    """
    pass

  def mc_node_update(self, sess_hdl, dev_id, l1_hdl, port_map, lag_map):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - l1_hdl
     - port_map
     - lag_map
    """
    pass

  def mc_node_destroy(self, sess_hdl, dev_id, l1_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - l1_hdl
    """
    pass

  def mc_associate_node(self, sess_hdl, dev_id, grp_hdl, l1_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - grp_hdl
     - l1_hdl
    """
    pass

  def mc_dissociate_node(self, sess_hdl, dev_id, grp_hdl, l1_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - grp_hdl
     - l1_hdl
    """
    pass

  def mc_set_lag_membership(self, sess_hdl, dev_id, lag_index, port_map):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - lag_index
     - port_map
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def mc_init(self):
    self.send_mc_init()
    return self.recv_mc_init()

  def send_mc_init(self):
    self._oprot.writeMessageBegin('mc_init', TMessageType.CALL, self._seqid)
    args = mc_init_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_init(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_init_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_init failed: unknown result");

  def mc_create_session(self):
    self.send_mc_create_session()
    return self.recv_mc_create_session()

  def send_mc_create_session(self):
    self._oprot.writeMessageBegin('mc_create_session', TMessageType.CALL, self._seqid)
    args = mc_create_session_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_create_session(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_create_session_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_create_session failed: unknown result");

  def mc_destroy_session(self, sess_hdl):
    """
    Parameters:
     - sess_hdl
    """
    self.send_mc_destroy_session(sess_hdl)
    return self.recv_mc_destroy_session()

  def send_mc_destroy_session(self, sess_hdl):
    self._oprot.writeMessageBegin('mc_destroy_session', TMessageType.CALL, self._seqid)
    args = mc_destroy_session_args()
    args.sess_hdl = sess_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_destroy_session(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_destroy_session_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_destroy_session failed: unknown result");

  def mc_mgrp_create(self, sess_hdl, dev_id, mgid):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - mgid
    """
    self.send_mc_mgrp_create(sess_hdl, dev_id, mgid)
    return self.recv_mc_mgrp_create()

  def send_mc_mgrp_create(self, sess_hdl, dev_id, mgid):
    self._oprot.writeMessageBegin('mc_mgrp_create', TMessageType.CALL, self._seqid)
    args = mc_mgrp_create_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.mgid = mgid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_mgrp_create(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_mgrp_create_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_mgrp_create failed: unknown result");

  def mc_mgrp_destroy(self, sess_hdl, dev_id, grp_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - grp_hdl
    """
    self.send_mc_mgrp_destroy(sess_hdl, dev_id, grp_hdl)
    return self.recv_mc_mgrp_destroy()

  def send_mc_mgrp_destroy(self, sess_hdl, dev_id, grp_hdl):
    self._oprot.writeMessageBegin('mc_mgrp_destroy', TMessageType.CALL, self._seqid)
    args = mc_mgrp_destroy_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.grp_hdl = grp_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_mgrp_destroy(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_mgrp_destroy_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_mgrp_destroy failed: unknown result");

  def mc_node_create(self, sess_hdl, dev_id, rid, port_map, lag_map):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - rid
     - port_map
     - lag_map
    """
    self.send_mc_node_create(sess_hdl, dev_id, rid, port_map, lag_map)
    return self.recv_mc_node_create()

  def send_mc_node_create(self, sess_hdl, dev_id, rid, port_map, lag_map):
    self._oprot.writeMessageBegin('mc_node_create', TMessageType.CALL, self._seqid)
    args = mc_node_create_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.rid = rid
    args.port_map = port_map
    args.lag_map = lag_map
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_node_create(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_node_create_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_node_create failed: unknown result");

  def mc_node_update(self, sess_hdl, dev_id, l1_hdl, port_map, lag_map):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - l1_hdl
     - port_map
     - lag_map
    """
    self.send_mc_node_update(sess_hdl, dev_id, l1_hdl, port_map, lag_map)
    return self.recv_mc_node_update()

  def send_mc_node_update(self, sess_hdl, dev_id, l1_hdl, port_map, lag_map):
    self._oprot.writeMessageBegin('mc_node_update', TMessageType.CALL, self._seqid)
    args = mc_node_update_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.l1_hdl = l1_hdl
    args.port_map = port_map
    args.lag_map = lag_map
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_node_update(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_node_update_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_node_update failed: unknown result");

  def mc_node_destroy(self, sess_hdl, dev_id, l1_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - l1_hdl
    """
    self.send_mc_node_destroy(sess_hdl, dev_id, l1_hdl)
    return self.recv_mc_node_destroy()

  def send_mc_node_destroy(self, sess_hdl, dev_id, l1_hdl):
    self._oprot.writeMessageBegin('mc_node_destroy', TMessageType.CALL, self._seqid)
    args = mc_node_destroy_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.l1_hdl = l1_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_node_destroy(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_node_destroy_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_node_destroy failed: unknown result");

  def mc_associate_node(self, sess_hdl, dev_id, grp_hdl, l1_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - grp_hdl
     - l1_hdl
    """
    self.send_mc_associate_node(sess_hdl, dev_id, grp_hdl, l1_hdl)
    return self.recv_mc_associate_node()

  def send_mc_associate_node(self, sess_hdl, dev_id, grp_hdl, l1_hdl):
    self._oprot.writeMessageBegin('mc_associate_node', TMessageType.CALL, self._seqid)
    args = mc_associate_node_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.grp_hdl = grp_hdl
    args.l1_hdl = l1_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_associate_node(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_associate_node_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_associate_node failed: unknown result");

  def mc_dissociate_node(self, sess_hdl, dev_id, grp_hdl, l1_hdl):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - grp_hdl
     - l1_hdl
    """
    self.send_mc_dissociate_node(sess_hdl, dev_id, grp_hdl, l1_hdl)
    return self.recv_mc_dissociate_node()

  def send_mc_dissociate_node(self, sess_hdl, dev_id, grp_hdl, l1_hdl):
    self._oprot.writeMessageBegin('mc_dissociate_node', TMessageType.CALL, self._seqid)
    args = mc_dissociate_node_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.grp_hdl = grp_hdl
    args.l1_hdl = l1_hdl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_dissociate_node(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_dissociate_node_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_dissociate_node failed: unknown result");

  def mc_set_lag_membership(self, sess_hdl, dev_id, lag_index, port_map):
    """
    Parameters:
     - sess_hdl
     - dev_id
     - lag_index
     - port_map
    """
    self.send_mc_set_lag_membership(sess_hdl, dev_id, lag_index, port_map)
    return self.recv_mc_set_lag_membership()

  def send_mc_set_lag_membership(self, sess_hdl, dev_id, lag_index, port_map):
    self._oprot.writeMessageBegin('mc_set_lag_membership', TMessageType.CALL, self._seqid)
    args = mc_set_lag_membership_args()
    args.sess_hdl = sess_hdl
    args.dev_id = dev_id
    args.lag_index = lag_index
    args.port_map = port_map
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mc_set_lag_membership(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = mc_set_lag_membership_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mc_set_lag_membership failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["mc_init"] = Processor.process_mc_init
    self._processMap["mc_create_session"] = Processor.process_mc_create_session
    self._processMap["mc_destroy_session"] = Processor.process_mc_destroy_session
    self._processMap["mc_mgrp_create"] = Processor.process_mc_mgrp_create
    self._processMap["mc_mgrp_destroy"] = Processor.process_mc_mgrp_destroy
    self._processMap["mc_node_create"] = Processor.process_mc_node_create
    self._processMap["mc_node_update"] = Processor.process_mc_node_update
    self._processMap["mc_node_destroy"] = Processor.process_mc_node_destroy
    self._processMap["mc_associate_node"] = Processor.process_mc_associate_node
    self._processMap["mc_dissociate_node"] = Processor.process_mc_dissociate_node
    self._processMap["mc_set_lag_membership"] = Processor.process_mc_set_lag_membership

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_mc_init(self, seqid, iprot, oprot):
    args = mc_init_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_init_result()
    result.success = self._handler.mc_init()
    oprot.writeMessageBegin("mc_init", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_create_session(self, seqid, iprot, oprot):
    args = mc_create_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_create_session_result()
    result.success = self._handler.mc_create_session()
    oprot.writeMessageBegin("mc_create_session", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_destroy_session(self, seqid, iprot, oprot):
    args = mc_destroy_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_destroy_session_result()
    result.success = self._handler.mc_destroy_session(args.sess_hdl)
    oprot.writeMessageBegin("mc_destroy_session", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_mgrp_create(self, seqid, iprot, oprot):
    args = mc_mgrp_create_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_mgrp_create_result()
    result.success = self._handler.mc_mgrp_create(args.sess_hdl, args.dev_id, args.mgid)
    oprot.writeMessageBegin("mc_mgrp_create", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_mgrp_destroy(self, seqid, iprot, oprot):
    args = mc_mgrp_destroy_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_mgrp_destroy_result()
    result.success = self._handler.mc_mgrp_destroy(args.sess_hdl, args.dev_id, args.grp_hdl)
    oprot.writeMessageBegin("mc_mgrp_destroy", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_node_create(self, seqid, iprot, oprot):
    args = mc_node_create_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_node_create_result()
    result.success = self._handler.mc_node_create(args.sess_hdl, args.dev_id, args.rid, args.port_map, args.lag_map)
    oprot.writeMessageBegin("mc_node_create", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_node_update(self, seqid, iprot, oprot):
    args = mc_node_update_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_node_update_result()
    result.success = self._handler.mc_node_update(args.sess_hdl, args.dev_id, args.l1_hdl, args.port_map, args.lag_map)
    oprot.writeMessageBegin("mc_node_update", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_node_destroy(self, seqid, iprot, oprot):
    args = mc_node_destroy_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_node_destroy_result()
    result.success = self._handler.mc_node_destroy(args.sess_hdl, args.dev_id, args.l1_hdl)
    oprot.writeMessageBegin("mc_node_destroy", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_associate_node(self, seqid, iprot, oprot):
    args = mc_associate_node_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_associate_node_result()
    result.success = self._handler.mc_associate_node(args.sess_hdl, args.dev_id, args.grp_hdl, args.l1_hdl)
    oprot.writeMessageBegin("mc_associate_node", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_dissociate_node(self, seqid, iprot, oprot):
    args = mc_dissociate_node_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_dissociate_node_result()
    result.success = self._handler.mc_dissociate_node(args.sess_hdl, args.dev_id, args.grp_hdl, args.l1_hdl)
    oprot.writeMessageBegin("mc_dissociate_node", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mc_set_lag_membership(self, seqid, iprot, oprot):
    args = mc_set_lag_membership_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mc_set_lag_membership_result()
    result.success = self._handler.mc_set_lag_membership(args.sess_hdl, args.dev_id, args.lag_index, args.port_map)
    oprot.writeMessageBegin("mc_set_lag_membership", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class mc_init_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_init_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_init_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_init_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_create_session_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_create_session_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_create_session_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_create_session_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_destroy_session_args:
  """
  Attributes:
   - sess_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
  )

  def __init__(self, sess_hdl=None,):
    self.sess_hdl = sess_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_destroy_session_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_destroy_session_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_destroy_session_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_mgrp_create_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - mgid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.I16, 'mgid', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, mgid=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.mgid = mgid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.mgid = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_mgrp_create_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.mgid is not None:
      oprot.writeFieldBegin('mgid', TType.I16, 3)
      oprot.writeI16(self.mgid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.mgid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_mgrp_create_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_mgrp_create_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_mgrp_destroy_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - grp_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'grp_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, grp_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.grp_hdl = grp_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.grp_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_mgrp_destroy_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.grp_hdl is not None:
      oprot.writeFieldBegin('grp_hdl', TType.I32, 3)
      oprot.writeI32(self.grp_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.grp_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_mgrp_destroy_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_mgrp_destroy_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_node_create_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - rid
   - port_map
   - lag_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.I16, 'rid', None, None, ), # 3
    (4, TType.STRING, 'port_map', None, None, ), # 4
    (5, TType.STRING, 'lag_map', None, None, ), # 5
  )

  def __init__(self, sess_hdl=None, dev_id=None, rid=None, port_map=None, lag_map=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.rid = rid
    self.port_map = port_map
    self.lag_map = lag_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.rid = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.port_map = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lag_map = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_node_create_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.rid is not None:
      oprot.writeFieldBegin('rid', TType.I16, 3)
      oprot.writeI16(self.rid)
      oprot.writeFieldEnd()
    if self.port_map is not None:
      oprot.writeFieldBegin('port_map', TType.STRING, 4)
      oprot.writeString(self.port_map)
      oprot.writeFieldEnd()
    if self.lag_map is not None:
      oprot.writeFieldBegin('lag_map', TType.STRING, 5)
      oprot.writeString(self.lag_map)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.rid)
    value = (value * 31) ^ hash(self.port_map)
    value = (value * 31) ^ hash(self.lag_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_node_create_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_node_create_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_node_update_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - l1_hdl
   - port_map
   - lag_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'l1_hdl', None, None, ), # 3
    (4, TType.STRING, 'port_map', None, None, ), # 4
    (5, TType.STRING, 'lag_map', None, None, ), # 5
  )

  def __init__(self, sess_hdl=None, dev_id=None, l1_hdl=None, port_map=None, lag_map=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.l1_hdl = l1_hdl
    self.port_map = port_map
    self.lag_map = lag_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.l1_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.port_map = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lag_map = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_node_update_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.l1_hdl is not None:
      oprot.writeFieldBegin('l1_hdl', TType.I32, 3)
      oprot.writeI32(self.l1_hdl)
      oprot.writeFieldEnd()
    if self.port_map is not None:
      oprot.writeFieldBegin('port_map', TType.STRING, 4)
      oprot.writeString(self.port_map)
      oprot.writeFieldEnd()
    if self.lag_map is not None:
      oprot.writeFieldBegin('lag_map', TType.STRING, 5)
      oprot.writeString(self.lag_map)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.l1_hdl)
    value = (value * 31) ^ hash(self.port_map)
    value = (value * 31) ^ hash(self.lag_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_node_update_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_node_update_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_node_destroy_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - l1_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'l1_hdl', None, None, ), # 3
  )

  def __init__(self, sess_hdl=None, dev_id=None, l1_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.l1_hdl = l1_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.l1_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_node_destroy_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.l1_hdl is not None:
      oprot.writeFieldBegin('l1_hdl', TType.I32, 3)
      oprot.writeI32(self.l1_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.l1_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_node_destroy_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_node_destroy_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_associate_node_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - grp_hdl
   - l1_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'grp_hdl', None, None, ), # 3
    (4, TType.I32, 'l1_hdl', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, grp_hdl=None, l1_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.grp_hdl = grp_hdl
    self.l1_hdl = l1_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.grp_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.l1_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_associate_node_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.grp_hdl is not None:
      oprot.writeFieldBegin('grp_hdl', TType.I32, 3)
      oprot.writeI32(self.grp_hdl)
      oprot.writeFieldEnd()
    if self.l1_hdl is not None:
      oprot.writeFieldBegin('l1_hdl', TType.I32, 4)
      oprot.writeI32(self.l1_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.grp_hdl)
    value = (value * 31) ^ hash(self.l1_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_associate_node_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_associate_node_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_dissociate_node_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - grp_hdl
   - l1_hdl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.I32, 'grp_hdl', None, None, ), # 3
    (4, TType.I32, 'l1_hdl', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, grp_hdl=None, l1_hdl=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.grp_hdl = grp_hdl
    self.l1_hdl = l1_hdl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.grp_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.l1_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_dissociate_node_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.grp_hdl is not None:
      oprot.writeFieldBegin('grp_hdl', TType.I32, 3)
      oprot.writeI32(self.grp_hdl)
      oprot.writeFieldEnd()
    if self.l1_hdl is not None:
      oprot.writeFieldBegin('l1_hdl', TType.I32, 4)
      oprot.writeI32(self.l1_hdl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.grp_hdl)
    value = (value * 31) ^ hash(self.l1_hdl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_dissociate_node_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_dissociate_node_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_set_lag_membership_args:
  """
  Attributes:
   - sess_hdl
   - dev_id
   - lag_index
   - port_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sess_hdl', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.BYTE, 'lag_index', None, None, ), # 3
    (4, TType.STRING, 'port_map', None, None, ), # 4
  )

  def __init__(self, sess_hdl=None, dev_id=None, lag_index=None, port_map=None,):
    self.sess_hdl = sess_hdl
    self.dev_id = dev_id
    self.lag_index = lag_index
    self.port_map = port_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sess_hdl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.lag_index = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.port_map = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_set_lag_membership_args')
    if self.sess_hdl is not None:
      oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
      oprot.writeI32(self.sess_hdl)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.lag_index is not None:
      oprot.writeFieldBegin('lag_index', TType.BYTE, 3)
      oprot.writeByte(self.lag_index)
      oprot.writeFieldEnd()
    if self.port_map is not None:
      oprot.writeFieldBegin('port_map', TType.STRING, 4)
      oprot.writeString(self.port_map)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sess_hdl)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.lag_index)
    value = (value * 31) ^ hash(self.port_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mc_set_lag_membership_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mc_set_lag_membership_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
