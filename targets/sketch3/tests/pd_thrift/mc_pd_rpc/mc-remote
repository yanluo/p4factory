#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from mc_pd_rpc import mc
from mc_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i32 mc_init()')
  print('  SessionHandle_t mc_create_session()')
  print('  i32 mc_destroy_session(SessionHandle_t sess_hdl)')
  print('  McHandle_t mc_mgrp_create(SessionHandle_t sess_hdl, i32 dev_id, i16 mgid)')
  print('  i32 mc_mgrp_destroy(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl)')
  print('  McHandle_t mc_node_create(SessionHandle_t sess_hdl, i32 dev_id, i16 rid, string port_map, string lag_map)')
  print('  i32 mc_node_update(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t l1_hdl, string port_map, string lag_map)')
  print('  i32 mc_node_destroy(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t l1_hdl)')
  print('  i32 mc_associate_node(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl, McHandle_t l1_hdl)')
  print('  i32 mc_dissociate_node(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl, McHandle_t l1_hdl)')
  print('  i32 mc_set_lag_membership(SessionHandle_t sess_hdl, i32 dev_id, byte lag_index, string port_map)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = mc.Client(protocol)
transport.open()

if cmd == 'mc_init':
  if len(args) != 0:
    print('mc_init requires 0 args')
    sys.exit(1)
  pp.pprint(client.mc_init())

elif cmd == 'mc_create_session':
  if len(args) != 0:
    print('mc_create_session requires 0 args')
    sys.exit(1)
  pp.pprint(client.mc_create_session())

elif cmd == 'mc_destroy_session':
  if len(args) != 1:
    print('mc_destroy_session requires 1 args')
    sys.exit(1)
  pp.pprint(client.mc_destroy_session(eval(args[0]),))

elif cmd == 'mc_mgrp_create':
  if len(args) != 3:
    print('mc_mgrp_create requires 3 args')
    sys.exit(1)
  pp.pprint(client.mc_mgrp_create(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mc_mgrp_destroy':
  if len(args) != 3:
    print('mc_mgrp_destroy requires 3 args')
    sys.exit(1)
  pp.pprint(client.mc_mgrp_destroy(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mc_node_create':
  if len(args) != 5:
    print('mc_node_create requires 5 args')
    sys.exit(1)
  pp.pprint(client.mc_node_create(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],))

elif cmd == 'mc_node_update':
  if len(args) != 5:
    print('mc_node_update requires 5 args')
    sys.exit(1)
  pp.pprint(client.mc_node_update(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],))

elif cmd == 'mc_node_destroy':
  if len(args) != 3:
    print('mc_node_destroy requires 3 args')
    sys.exit(1)
  pp.pprint(client.mc_node_destroy(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mc_associate_node':
  if len(args) != 4:
    print('mc_associate_node requires 4 args')
    sys.exit(1)
  pp.pprint(client.mc_associate_node(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mc_dissociate_node':
  if len(args) != 4:
    print('mc_dissociate_node requires 4 args')
    sys.exit(1)
  pp.pprint(client.mc_dissociate_node(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mc_set_lag_membership':
  if len(args) != 4:
    print('mc_set_lag_membership requires 4 args')
    sys.exit(1)
  pp.pprint(client.mc_set_lag_membership(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
